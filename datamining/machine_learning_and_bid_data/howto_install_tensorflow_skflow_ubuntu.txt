########################################
#
#	TensorBoard: Visualizing Learning
#
########################################

https://www.tensorflow.org/versions/r0.11/how_tos/summaries_and_tensorboard/index.html
https://www.tensorflow.org/versions/r0.11/tutorials/wide_and_deep/index.html
https://www.tensorflow.org/versions/r0.11/tutorials/index.html
https://www.tensorflow.org/versions/r0.11/how_tos/index.html
https://github.com/tensorflow/tensorflow
https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/learn/python/learn
http://www.kdnuggets.com/2016/02/scikit-flow-easy-deep-learning-tensorflow-scikit-learn.html
https://blog.keras.io/keras-as-a-simplified-interface-to-tensorflow-tutorial.html

########################################
#
#	SkFlow
#
########################################

https://github.com/tensorflow/skflow
http://terrytangyuan.github.io/2016/03/14/scikit-flow-intro/

SkFlow has been moved into Tensorflow 0.8+

-----------------------------------------

Linear Classifier

Simple linear classification:

import tensorflow.contrib.learn as skflow
from sklearn import datasets, metrics

iris = datasets.load_iris()
classifier = skflow.TensorFlowLinearClassifier(n_classes=3)
classifier.fit(iris.data, iris.target)
score = metrics.accuracy_score(iris.target, classifier.predict(iris.data))
print("Accuracy: %f" % score)

-----------------------------------------

Linear Regressor

Simple linear regression:

import tensorflow.contrib.learn as skflow
from sklearn import datasets, metrics, preprocessing

boston = datasets.load_boston()
X = preprocessing.StandardScaler().fit_transform(boston.data)
regressor = skflow.TensorFlowLinearRegressor()
regressor.fit(X, boston.target)
score = metrics.mean_squared_error(regressor.predict(X), boston.target)
print ("MSE: %f" % score)

-----------------------------------------

Deep Neural Network

Example of 3 layer network with 10, 20 and 10 hidden units respectively:

import tensorflow.contrib.learn as skflow
from sklearn import datasets, metrics

iris = datasets.load_iris()
classifier = skflow.TensorFlowDNNClassifier(hidden_units=[10, 20, 10], n_classes=3)
classifier.fit(iris.data, iris.target)
score = metrics.accuracy_score(iris.target, classifier.predict(iris.data))
print("Accuracy: %f" % score)

-----------------------------------------

Custom model

Example of how to pass a custom model to the TensorFlowEstimator:

import tensorflow.contrib.learn as skflow
from sklearn import datasets, metrics

iris = datasets.load_iris()

def my_model(X, y):
    """This is DNN with 10, 20, 10 hidden layers, and dropout of 0.5 probability."""
    layers = skflow.ops.dnn(X, [10, 20, 10], keep_prob=0.5)
    return skflow.models.logistic_regression(layers, y)

classifier = skflow.TensorFlowEstimator(model_fn=my_model, n_classes=3)
classifier.fit(iris.data, iris.target)
score = metrics.accuracy_score(iris.target, classifier.predict(iris.data))
print("Accuracy: %f" % score)
Saving / Restoring models

-----------------------------------------

Some example code:

import tensorflow.contrib.learn as skflow

classifier = skflow.TensorFlowLinearRegression()
classifier.fit(...)
classifier.save('/tmp/tf_examples/my_model_1/')

new_classifier = TensorFlowEstimator.restore('/tmp/tf_examples/my_model_2')
new_classifier.predict(...)

-----------------------------------------

Summaries

To get nice visualizations and summaries you can use logdir parameter on fit. It will start writing summaries for loss and histograms for variables in your model. You can also add custom summaries in your custom model function by calling tf.summary and passing Tensors to report.

classifier = skflow.TensorFlowLinearRegression()
classifier.fit(X, y, logdir='/tmp/tf_examples/my_model_1/')

-----------------------------------------

Then run next command in command line:

tensorboard --logdir=/tmp/tf_examples/my_model_1


##########################################
#
#	Magenta: Music and Art Generation with Machine Intelligence
#	https://github.com/tensorflow/magenta
#	https://github.com/tensorflow/models
#	https://github.com/tensorflow/haskell
#
##########################################