
##############################################################
#
#   Image Recognition with Tensorflow or YOLO darknet
#
##############################################################

Resources:
https://www.tensorflow.org/tutorials/image_recognition
https://github.com/rdcolema/tensorflow-image-classification
https://pjreddie.com/darknet/yolo/
https://pjreddie.com/darknet/install/
https://pjreddie.com/darknet/install/#cuda
https://developer.nvidia.com/cuda-gpus
https://developer.nvidia.com/cuda-downloads

https://www.youtube.com/watch?v=4eIBisqx9_g

https://github.com/pjreddie/darknet/issues/209
https://github.com/pjreddie/darknet/issues/102
https://github.com/pjreddie/darknet/issues/80

https://libraries.io/github/AlexeyAB/darknet
https://github.com/AlexeyAB/darknet
https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects

https://github.com/pjreddie/darknet/wiki/YOLO:-Real-Time-Object-Detection
https://github.com/GustavZ/realtime_object_detection


http://pjreddie.com/media/files/yolo-voc.weights
http://pjreddie.com/media/files/tiny-yolo-voc.weights

=================================================
# Usage with Python API Tensorflow
=================================================

# Install Dependency Packages

sudo apt install python3-pip -y
pip3 install tensorflow
pip3 install numpy
pip3 install pandas


git clone https://github.com/tensorflow/models

cd models/tutorials/image/imagenet
python classify_image.py
python classify_image.py --image_file your_file_here
python3 classify_image.py --image_file your_file_here

If you wish to supply other JPEG images, you may do so by editing the --image_file argument.
If you download the model data to a different directory, you will need to point --model_dir to the directory used.

=================================================
# YOLO detect images
=================================================
Installing The Base System (  OpenCV CUDA )

git clone https://github.com/pjreddie/darknet.git
cd darknet
make

# mkdir -p obj
# mkdir -p resutls
# ./darknet
# usage: ./darknet <function>

wget https://pjreddie.com/media/files/yolov3.weights #
wget https://pjreddie.com/media/files/yolo.weights #
wget https://pjreddie.com/media/files/yolov2.weights #
wget https://pjreddie.com/media/files/yolo-tiny.weights #


Detection Using A Pre-Trained Model

./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg
./darknet detector test cfg/coco.data cfg/yolov3.cfg yolov3.weights data/dog.jpg

Multiple Images & Changing The Detection Threshold

./darknet detect cfg/yolov3.cfg yolov3.weights
./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg -thresh 0

Example
./darknet detect cfg/yolov3.cfg yolov3.weights  ~/Downloads/baby1.jpg -out baby1_prediction.jpg




https://pjreddie.com/darknet/yolo/
http://cocodataset.org/#overview
https://pjreddie.com/darknet/yolo/
https://github.com/pjreddie/darknet
https://github.com/Guanghan/darknet

****

Training YOLO with our own dataset
http://ashishkhan.com/blog/not-hotdog-app-with-darknet-yolo-face-detection
http://guanghan.info/posts/

https://github.com/Guanghan/darknet/blob/master/cfg/yolo_2class_box11.cfg
https://github.com/Guanghan/darknet
http://guanghan.info/download/yolo_2class_box11_3000.weights
http://guanghan.info/download/images.tar.gz
http://guanghan.info/download/labels.tar.gz
****

YOLO CPU Running Time Reduction: Basic Knowledge and Strategies
http://guanghan.info/blog/en/my-works/yolo-cpu-running-time-reduction-basic-knowledge-and-strategies/
https://github.com/Guanghan/cpuNet
http://guanghan.info/posts/cpuNet/cpuNet10_1class.cfg
http://guanghan.info/posts/cpuNet/cpuNet10_1class_final.weights


Face ID results + Changing The Detection Threshold
./darknet detector test data/obj.data yolo-obj.cfg yolo-obj_xxxx.weights
./darknet detector test data/obj.data yolo-obj.cfg yolo-obj_xxxx.weights images/test.jpg -thresh 0.6





################################################################
#
# FMPEG and darknet object detect
#
################################################################

# extract images from video into folder , down scaling video from 1280x720 (1920x1080)
mkdir jpg2
ffmpeg -ss 00:00:26.000 -i vid.mp4 -s 640x360 -t 00:00:03.000 -r 6 jpg2/vid_%04d.jpg

# detect object in every image
#for f in jpg2/*.jpg; do echo "$f"; done
for f in jpg2/*.jpg; do ./darknet detect cfg/yolov3.cfg yolov3.weights "$f" -out "$f"_out; done

# rebuild merge images into video
ffmpeg -framerate 1 -pattern_type glob -i '*.jpg' -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4
ffmpeg -framerate 1 -r 10 -pattern_type glob -i '*.png' -c:v libx264 -r 30 -pix_fmt yuv420p out4.mp4


# Transform mp4 to gif
Get palette from video
ffmpeg -y -i file.mp4 -vf palettegen palette.png

Use palette
ffmpeg -y -i file.mp4 -i palette.png -filter_complex paletteuse -r 10 -s 320x480 file.gif

ffmpeg -y -i file.mp4  -r 10 -s 352x240 file1.gif
https://de.wikipedia.org/wiki/Videoauflösung





====================================================================================
Compress GIF ?
====================================================================================

http://cassidy.codes/blog/2017/04/25/ffmpeg-frames-to-gif-optimization/

#!/bin/sh
palette="/tmp/palette.png"
filters="fps=15,scale=320:-1:flags=lanczos"
ffmpeg -v warning -i $1 -vf "$filters,palettegen=stats_mode=diff" -y $palette
ffmpeg -i $1 -i $palette -lavfi "$filters,paletteuse=dither=bayer:bayer_scale=5:diff_mode=rectangle" -y $2

ffmpeg -i $1 -i palette.png -lavfi "fps=15,scale=320:-1:flags=lanczos,paletteuse=dither=bayer:bayer_scale=5:diff_mode=rectangle" -y $2


https://davidwalsh.name/optimize-gifs

sudo apt install gifsicle
gifsicle has three types of GIF optimization to choose from:

-O1 Stores only the changed portion of each image. This is the default.
-O2 Also uses transparency to shrink the file further.
-O3 Try several optimization methods (usually slower, sometimes better results).
The shell command to optimize GIFs is:

gifsicle -O3 animation.gif -o animation-optimized.gif
gifsicle --colors 256 animation.gif -o animation-optimized.gif

ffmpeg -i file.mp4  -pix_fmt rgb24 -y file55.gif
ffmpeg -i "RGB_source.avi" -c:v libx264 -qp:v 0 -profile:v high444 -pix_fmt yuv444p "444_out.avi"


sudo apt install avconv
avconv -i input.mp4 -pix_fmt rgb24 output.gif
avconv -i input.mp4 -pix_fmt brg8 output.gif

compress gif images with ImageMagick
convert test.gif -fuzz 10% -layers Optimize -quality 80% result.gif
convert test.gif -quality 100 -antialias -scale 240x320! -compress LZW result.gif
convert test.gif -fuzz 3% -resize '1920x350!' -delay 5 -loop 0 -coalesce -layers OptimizeTransparency  out.gif




========================================================
FX Glitch GIF
convert test.gif -coalesce +repage -fuzz 3.0%% -delay 4 -loop 0 frames -layers Optimize -quality 80% result.gif  #fx
convert test.gif -quality 100 -antialias -delay 20 -fuzz 30% -layers Optimize result.gif  #fx

# get 20 sec of video and glitch it!
ffmpeg  -i out2.mp4  -lavfi "fps=15,scale=320:-1:flags=lanczos" -crf 24 -t 20  -y out5.gif
convert result.gif -coalesce +repage -fuzz 60% -delay 4 -loop 0 frames -layers Optimize -quality 40%  result3.gif
========================================================


sudo apt install  gifsicle
gifsicle --colors 128 in.gif out.gif

https://www.imagemagick.org/Usage/bugs/fuzz_distance/
http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html
https://mwholt.blogspot.de/2014/08/convert-video-to-animated-gif-with.html
https://medium.com/@colten_jackson/doing-the-gif-thing-on-debian-82b9760a8483
https://rigor.com/blog/2015/12/optimizing-animated-gifs-with-html5-video
https://www.bugcodemaster.com/article/convert-video-animated-gif-using-ffmpeg
https://www.imagemagick.org/discourse-server/viewtopic.php?t=12874

ffmpeg -i input.mp4 -c:v libvpx -crf 40 -b:v 1M -c:a libvorbis output.webm
ffmpeg -i input.mp4 -r 20 -f image2pipe -vcodec ppm - | convert -delay 5 - gif:- | convert -layers Optimize - output.gif
ffmpeg -i input.mp4 -r 20 -f image2pipe -vcodec ppm - | convert -delay 5 - output.gif
ffmpeg -ss 2.6 -t 1.3 -i MVI_7035.MOV -i palette.png -filter_complex “fps=15,scale=400:-1:flags=lanczos[x];[x][1:v]paletteuse” sixthtry.gif
ffmpeg -i animated.gif -movflags faststart -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" video.mp4


ffmpeg -i 00105.MTS -vcodec libx264 -crf 22.5 -vpre normal -f mp4 -s hd480 -qcomp 0.8 -qscale 5 -threads 2 -ac 2 -y output.mp4
ffmpeg -y -i in.mp4 -qscale 5 -qcomp 0.8 -crf 24 -s 320x240 out.gif

====================================================================================


./darknet detector demo data/voc.data yolo-voc.cfg yolo-voc.weights test.mp4 -i 0 -http_port 8090
./darknet detector demo data/voc.data yolo-voc.cfg yolo-voc.weights test.mp4 -i 0 -http_port 8090 -dont_show
./darknet detector test data/coco.data yolov3.cfg yolov3.weights -i 0 -thresh 0.25 dogr.jpg  -out dogr1.jpg
./darknet detector test ./cfg/coco.data ./cfg/yolov3.cfg ./yolov3.weights data/dog.jpg -i 0 -thresh 0.25

./darknet detector test ./cfg/coco.data ./cfg/yolov3.cfg ./yolov3.weights -dont_show < data/train.txt > result.txt
in the file data/train.txt you should have paths to images
in the file result.txt will be results of detections











------------------------------------------------------------------------------------------------------
=================================================
Real-Time Detection on a Webcam && YOLO with GPU, CuDnn and OpenCV.
=================================================
Darknet on the CPU is fast but it's like 500 times faster on GPU! You'll have to have an Nvidia GPU and you'll have to install CUDA. I won't go into CUDA installation in detail because it is terrifying.
To run this demo you will need to compile Darknet with CUDA and OpenCV.

Environment
Ubuntu 16.04
CUDA Version 8.0.61
OpenCV 3.2
GPU: GeForce 840M (2GB)
Driver: NVIDIA 375.66

Optimise:
tiny-yolo -> ~15 FPS on GeForce 840M
decrease width=288 and height=288 in the tiny-yolo.cfg

./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights
./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights <video file>
./darknet detector demo cfg/coco.data cfg/yolo.cfg weights/yolo.weights ~/Videos/myvid.mp4
./darknet detector demo cfg/coco.data cfg/yolo-tiny.cfg yolo-tiny.weights video-file.mp4
./darknet detector demo data/rgb.data cfg/yolo-tiny.cfg yolo-tiny_50000.weights ~/videos/sum.mp4 -i 0

./darknet yolo test path_to_myyolo.cfg path_to_my_weights path_to_video.avi
./flow --model cfg/v1/yolo-tiny.cfg --load bin/yolo-tiny.weights --demo batman.mp4 --saveVideo
./darknet detector demo cfg/coco.data cfg/yolo.cfg cfg/yolo.weights ~/Downloads/3.avi -i 0Demo
./darkenet yolo demo yolo-voc.cfg yolo-voc.weights test.mp4 -i 0
./darkenet yolo demo yolo-voc.cfg yolo-voc.weights http://192.168.0.80:8080/video?dummy=param.mjpg -i 0

Download Pretrained Convolutional Weights
wget https://pjreddie.com/media/files/darknet53.conv.74
./darknet detector train cfg/voc.data cfg/yolov3-voc.cfg darknet53.conv.74



https://medium.com/techlogs/compiling-opencv-for-cuda-for-yolo-and-other-cnn-libraries-9ce427c00ff8
=================================================
install NVIDIAs
=================================================
sudo apt-get install build-essential
sudo apt-add-repository ppa:graphics-drivers/ppa
sudo apt-get update
sudo apt-get install nvidia-3xx
sudo modeporbe nvidia (also ran this before restart)

# nvidia-smi command

Then download and install CUDA, currently CUDA 8, but without installing the drivers; There is a --driver=no

nvccc --version

install OpenCV
sudo apt-get install build-essential cmake pkg-config
sudo apt-get install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev


sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install libxvidcore-dev libx264-dev
sudo apt-get install libgtk-3-dev
sudo apt-get install libatlas-base-dev gfortran
sudo apt-get install python2.7-dev python3.5-dev

Download the OpenCV source
# https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/
# https://github.com/opencv/opencv
# https://github.com/opencv/opencv_contrib
# https://docs.opencv.org/trunk/d7/d9f/tutorial_linux_install.html
# https://docs.opencv.org/3.4.1/d2/de6/tutorial_py_setup_in_ubuntu.html


[compiler] sudo apt-get install build-essential
[required] sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
[optional] sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev


cd ~
$ wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.1.0.zip
$ unzip opencv.zip
wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.1.0.zip
$ unzip opencv_contrib.zip

# Creating your Python virtual environment
mkvirtualenv cv -p python2
mkvirtualenv cv3 -p python3

workon cv

cd ~/<my_working_directory>
git clone https://github.com/opencv/opencv.git
git clone https://github.com/opencv/opencv_contrib.git


Installing OpenCV-Python from Pre-built Binaries
sudo apt-get install python-opencv





=================================================
Installing OpenCV
=================================================
https://linuxhint.com/how-to-install-opencv-on-ubuntu/
https://help.ubuntu.com/community/OpenCV
https://github.com/BVLC/caffe/wiki/OpenCV-3.3-Installation-Guide-on-Ubuntu-16.04
http://www.codebind.com/cpp-tutorial/install-opencv-ubuntu-cpp/
https://www.learnopencv.com/install-opencv3-on-ubuntu/
https://medium.com/@debugvn/installing-opencv-3-3-0-on-ubuntu-16-04-lts-7db376f93961




=================================================
Install dependencies
=================================================
sudo apt-get install build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
$ sudo apt-get install python3.5-dev python3-numpy libtbb2 libtbb-dev
$ sudo apt-get install libjpeg-dev libpng-dev libtiff5-dev libjasper-dev libdc1394-22-dev libeigen3-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev sphinx-common libtbb-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libopenexr-dev libgstreamer-plugins-base1.0-dev libavutil-dev libavfilter-dev libavresample-dev


apt-get install wget cmake g++ unzip vim

--------- Get OpenCV ---------

wget https://github.com/opencv/opencv/archive/3.3.1.zip
unzip 3.3.1.zip
cd opencv-3.3.1
mkdir build
cd build
cmake ..
make
make install


#include "opencv2/core/core.hpp"
#include <iostream>

int main()
{
cv::Point2f p(4, 5);
std::cout << "Point output: " << p << std::endl;
return 0;
}


g++ test.cpp -o test
./test
Point output: [4, 5]


=================================================
--------- Get OpenCV v2  ---------
=================================================
sudo -s
$ cd /opt
/opt$ git clone https://github.com/Itseez/opencv.git
/opt$ git clone https://github.com/Itseez/opencv_contrib.git

--------- build and install OpenCV ---------

/opt$ cd opencv
/opt/opencv$ mkdir release
/opt/opencv$ cd release

/opt/opencv/release$ cmake -D BUILD_TIFF=ON -D WITH_CUDA=OFF -D ENABLE_AVX=OFF -D WITH_OPENGL=OFF -D WITH_OPENCL=OFF -D WITH_IPP=OFF -D WITH_TBB=ON -D BUILD_TBB=ON -D WITH_EIGEN=OFF -D WITH_V4L=OFF -D WITH_VTK=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules /opt/opencv/

/opt/opencv/release$ make -j4
/opt/opencv/release$ make install
/opt/opencv/release$ ldconfig
/opt/opencv/release$ exit
/opt/opencv/release$ cd ~


Now to check if OpenCV is installed on a machine, run the following commands
pkg-config --modversion opencv 3.2.x

------------------------------------------------------










=================================================
Install OS libraries
=================================================
Remove any previous installations of x264</h3>
sudo apt-get remove x264 libx264-dev

We will Install dependencies now

sudo apt-get install build-essential checkinstall cmake pkg-config yasm
sudo apt-get install git gfortran
sudo apt-get install libjpeg8-dev libjasper-dev libpng12-dev

# If you are using Ubuntu 14.04
sudo apt-get install libtiff4-dev
# If you are using Ubuntu 16.04
sudo apt-get install libtiff5-dev

sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev
sudo apt-get install libxine2-dev libv4l-dev
sudo apt-get install libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev
sudo apt-get install qt5-default libgtk2.0-dev libtbb-dev
sudo apt-get install libatlas-base-dev
sudo apt-get install libfaac-dev libmp3lame-dev libtheora-dev
sudo apt-get install libvorbis-dev libxvidcore-dev
sudo apt-get install libopencore-amrnb-dev libopencore-amrwb-dev
sudo apt-get install x264 v4l-utils

# Optional dependencies
sudo apt-get install libprotobuf-dev protobuf-compiler
sudo apt-get install libgoogle-glog-dev libgflags-dev
sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen



=================================================
Install Python libraries
=================================================
sudo apt-get install python-dev python-pip python3-dev python3-pip
sudo -H pip2 install -U pip numpy
sudo -H pip3 install -U pip numpy

We will use Virtual Environment to install Python libraries

# Install virtual environment
sudo pip2 install virtualenv virtualenvwrapper
sudo pip3 install virtualenv virtualenvwrapper
echo "# Virtual Environment Wrapper"  >> ~/.bashrc
echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
source ~/.bashrc

############ For Python 2 ############
# create virtual environment
mkvirtualenv facecourse-py2 -p python2
workon facecourse-py2

# now install python libraries within this virtual environment
pip install numpy scipy matplotlib scikit-image scikit-learn ipython

# quit virtual environment
deactivate
######################################

############ For Python 3 ############
# create virtual environment
mkvirtualenv facecourse-py3 -p python3
workon facecourse-py3

# now install python libraries within this virtual environment
pip install numpy scipy matplotlib scikit-image scikit-learn ipython

# quit virtual environment
deactivate
######################################


------- Download OpenCV and OpenCV_contrib -------

Download opencv from Github

git clone https://github.com/opencv/opencv.git
cd opencv
git checkout 3.3.1
cd ..

Download opencv_contrib from Github

git clone https://github.com/opencv/opencv_contrib.git
cd opencv_contrib
git checkout 3.3.1
cd ..

Compile and install OpenCV with contrib modules

Create a build directory

cd opencv
mkdir build
cd build

Run CMake

cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D INSTALL_C_EXAMPLES=ON \
      -D INSTALL_PYTHON_EXAMPLES=ON \
      -D WITH_TBB=ON \
      -D WITH_V4L=ON \
      -D WITH_QT=ON \
      -D WITH_OPENGL=ON \
      -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
      -D BUILD_EXAMPLES=ON ..

Compile and Install

# find out number of CPU cores in your machine
nproc
# substitute 4 by output of nproc
make -j4
sudo make install
sudo sh -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'
sudo ldconfig


Create symlink in virtual environment

find /usr/local/lib/ -type f -name "cv2*.so"

############ For Python 2 ############
## binary installed in dist-packages
/usr/local/lib/python2.6/dist-packages/cv2.so
/usr/local/lib/python2.7/dist-packages/cv2.so
## binary installed in site-packages
/usr/local/lib/python2.6/site-packages/cv2.so
/usr/local/lib/python2.7/site-packages/cv2.so

############ For Python 3 ############
## binary installed in dist-packages
/usr/local/lib/python3.5/dist-packages/cv2.cpython-35m-x86_64-linux-gnu.so
/usr/local/lib/python3.6/dist-packages/cv2.cpython-36m-x86_64-linux-gnu.so
## binary installed in site-packages
/usr/local/lib/python3.5/site-packages/cv2.cpython-35m-x86_64-linux-gnu.so
/usr/local/lib/python3.6/site-packages/cv2.cpython-36m-x86_64-linux-gnu.so

############ For Python 2 ############
cd ~/.virtualenvs/facecourse-py2/lib/python2.7/site-packages
ln -s /usr/local/lib/python2.7/dist-packages/cv2.so cv2.so

############ For Python 3 ############
cd ~/.virtualenvs/facecourse-py3/lib/python3.6/site-packages
ln -s /usr/local/lib/python3.6/dist-packages/cv2.cpython-36m-x86_64-linux-gnu.so cv2.so

Test OpenCV3
https://www.learnopencv.com/wp-content/uploads/2017/06/RedEyeRemover.zip

-------- Test C++ code --------
Move inside extracted folder, compile and run.


# compile
# There are backticks ( ` ) around pkg-config command not single quotes
g++ -std=c++11 removeRedEyes.cpp `pkg-config --libs --cflags opencv` -o removeRedEyes
# run
./removeRedEyes



-------- Test Python code --------
Activate Python virtual environment

############ For Python 2 ############
workon facecourse-py2

############ For Python 3 ############
workon facecourse-py3
Quick Check

# open ipython (run this command on terminal)
ipython
# import cv2 and print version (run following commands in ipython)
import cv2
print cv2.__version__
# If OpenCV3 is installed correctly,
# above command should give output 3.3.1
# Press CTRL+D to exit ipython
Run RedEyeRemover demo

python removeRedEyes.py
Now you can exit from Python virtual environment.


deactivate


*
*
*
*
*
*
*


https://medium.com/@debugvn/installing-opencv-3-3-0-on-ubuntu-16-04-lts-7db376f93961
Installing all the recommended packages

sudo apt-get install build-essential
sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev



sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev

$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
$ sudo apt-get install libxvidcore-dev libx264-dev
$ sudo apt-get install libgtk-3-dev
$ sudo apt-get install libatlas-base-dev gfortran
$ sudo apt-get install python2.7-dev python3.5-dev


Download OpenCV source:

cd ~
$ wget -O opencv.zip https://github.com/opencv/opencv/archive/3.3.0.zip
$ unzip opencv.zip

cd ~
$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.3.0.zip
$ unzip opencv_contrib.zip

Setup your environment

sudo apt-get install python-pip && pip install --upgrade pip

sudo pip install virtualenv virtualenvwrapper
$ sudo rm -rf ~/.cache/pip

cd ~
$ nano .bashrc
# virtualenv and virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh

source ~/.bashrc
mkvirtualenv cv -p python3
workon cv
pip install numpy

cd ~/opencv-3.3.0/
$ mkdir build
$ cd build
$ cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D INSTALL_PYTHON_EXAMPLES=ON \
      -D INSTALL_C_EXAMPLES=OFF \
      -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.3.0/modules \
      -D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python \
      -D BUILD_EXAMPLES=ON ..

make -j4
sudo make install
$ sudo ldconfig

Finish your OpenCV install

cd /usr/local/lib/python3.5/site-packages/
$ ls -l


*
*
*
*
*
*
*
*


https://milq.github.io/install-opencv-ubuntu-debian/

sudo apt-get install libopencv-dev python-opencv
sudo apt-get autoremove libopencv-dev python-opencv

https://github.com/milq/milq/blob/master/scripts/bash/install-opencv.sh
bash install-opencv.sh