

#####################################
Simple python wrapper for YOLO. - how to train
#####################################

https://github.com/OlafenwaMoses/ImageAI/tree/master/examples
https://github.com/pytorch/extension-ffi
https://github.com/pytorch/examples/tree/master/imagenet
http://cocodataset.org/#overview
https://pjreddie.com/projects/pascal-voc-dataset-mirror/
https://pjreddie.com/darknet/imagenet/#extraction
https://index.pocketcluster.io/eriklindernoren-pytorch-yolov3.html
https://pjreddie.com/darknet/yolov2/
https://pjreddie.com/darknet/yolov1/
https://pjreddie.com/darknet/yolo/
https://timebutt.github.io/static/how-to-train-yolov2-to-detect-custom-objects/
https://medium.com/@manivannan_data/how-to-train-yolov2-to-detect-custom-objects-9010df784f36
https://timebutt.github.io/static/how-to-train-yolov2-to-detect-custom-objects/
https://timebutt.github.io/static/how-to-train-yolov2-to-detect-custom-objects/
https://medium.com/@manivannan_data/how-to-train-multiple-objects-in-yolov2-using-your-own-dataset-2b4fee898f17
https://medium.com/@ribomo42/how-to-train-yolo-v2-with-your-own-data-object-and-labels-on-darknet-2b90dbfecb02
https://medium.com/@guymodscientist/object-detection-with-10-lines-of-code-d6cb4d86f606
https://medium.com/@ayoosh/yolo-v3-object-detection-53fb7d3bfe6b
https://github.com/Guanghan/darknet/blob/master/scripts/convert.py
https://github.com/digitalbrain79/pyyolo
https://github.com/ayooshkathuria/pytorch-yolo-v3
https://blog.paperspace.com/how-to-implement-a-yolo-v3-object-detector-from-scratch-in-pytorch-part-3/
http://ashishkhan.com/blog/not-hotdog-app-with-darknet-yolo-face-detection
https://jumabek.wordpress.com/2017/03/04/how-to-train-yolov2-on-costum-dataset/


--------------------------------------------
train data yolo
--------------------------------------------
https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects
http://seangtkelley.me/blog/2017/12/08/training-yolov2-custom-data
https://github.com/AlexeyAB/darknet
https://github.com/AlexeyAB/Yolo_mark
http://guanghan.info/blog/en/my-works/train-yolo/
https://github.com/puzzledqs/BBox-Label-Tool
https://github.com/drforester/Guide_to_using_YOLOv2
https://github.com/pjreddie/darknet/blob/master/scripts/get_coco_dataset.sh
https://github.com/eriklindernoren/PyTorch-YOLOv3/blob/master/data/get_coco_dataset.sh

--------------------------------------------
unsupervised classification algorithms K-means clustering Clustering Association
--------------------------------------------
https://www.datanami.com/2017/08/14/training-ai-little-manually-labeled-data-possible/
https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/using_your_own_dataset.md
https://medium.com/@datitran/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9
https://www.quora.com/How-do-I-label-huge-Twitter-data-set-for-training-a-sentiment-analysis-classifier-without-manually-labeling-them
https://www.youtube.com/watch?v=_aWzGGNrcic
https://www.youtube.com/watch?v=zHbxbb2ye3E
https://machinelearningmastery.com/supervised-and-unsupervised-machine-learning-algorithms/
https://www.researchgate.net/post/How_do_I_label_100_documents_to_prepare_my_training_data_for_sentiment_analysis_using_Naive_Bayes
http://alias-i.com/lingpipe/demos/tutorial/classify/read-me.html
https://opennlp.apache.org
https://www.altexsoft.com/blog/datascience/how-to-organize-data-labeling-for-machine-learning-approaches-and-tools/

https://arxiv.org/pdf/1708.01241.pdf
https://arxiv.org/pdf/1608.06993.pdf
https://arxiv.org/pdf/1412.6806.pdf
http://www.ijcsi.org/papers/IJCSI-9-2-2-518-524.pdf # Image Classification through integrated K- Means
http://www.ijettcs.org/Volume3Issue1/IJETTCS-2014-01-08-015.pdf # Image Classification through integrated K- Means
http://gregstanleyandassociates.com/whitepapers/BDAC/Clustering/clustering.htm
https://ieeexplore.ieee.org/document/8014707/
https://dzone.com/articles/cluster-image-with-k-means #

--------------------------------------------
transform image to vector matrix python
--------------------------------------------
https://scialert.net/fulltextmobile/?doi=itj.2007.148.153
https://www.coursera.org/learn/digital/lecture/KHf3u/watersheds-and-k-means-algorithms # video
https://www.sciencedirect.com/science/article/pii/S2210832714000234
https://www.sciencedirect.com/science/article/pii/S089571771200369X
http://openimaj.org/tutorial/introduction-to-clustering-segmentation-and-connected-components.html
https://www.datascience.com/blog/k-means-clustering

https://gist.github.com/spartanroc/956623
https://github.com/robintw/RTWToolsForArcGIS
http://www.py6s.rtwilson.com
http://www.rtwilson.com/academic/autozotbib
http://blog.rtwilson.com/review-image-analysis-classification-and-change-detection-in-remote-sensing-with-algorithms-for-enviidl-by-m-j-canty/
https://books.google.de/books?id=zM2uAwAAQBAJ&printsec=frontcover&hl=de#v=onepage&q&f=false
https://mortcanty.github.io/src/software.html
https://mortcanty.github.io/src/pythondoc.pdf
https://books.google.de/books/about/Proceedings_of_the_8th_Python_in_Science.html?id=KsQmAgAAQBAJ&source=kp_cover&redir_esc=y
https://www.amazon.com/Analysis-Classification-Change-Detection-Sensing/dp/1466570377/ref=mt_hardcover?_encoding=UTF8&me=&qid=

https://stackoverflow.com/questions/384759/how-to-convert-a-pil-image-into-a-numpy-array?rq=1
https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.reshape.html
http://www.scipy-lectures.org/advanced/image_processing/
http://code.activestate.com/recipes/577591-conversion-of-pil-image-and-numpy-array/
https://stackoverflow.com/questions/384759/how-to-convert-a-pil-image-into-a-numpy-array?rq=1

http://www.open3d.org/docs/tutorial/Basic/working_with_numpy.html
https://machinelearningmastery.com/index-slice-reshape-numpy-arrays-machine-learning-python/

* * * * * * * *
# image to vector
import numpy as np
import matplotlib.pyplot as plt
# get the dataset
a = unpickle('./cifar-10/data_batch_1')
# get the first image
img = np.array(a[b'data'][0])
# transform it to a 3 x 1024 array, one row per color channel
# and transpose it to a 1024 x 3 array, one row per rgb pixel
img = img.reshape(3, 1024).T
# reshape it so we can plot it as a 32 x 32 image with 3 color channels
img = img.reshape(32, 32, 3)
# plot
plt.imshow(img)
plt.show()

* * * * * * * *
# convert 2D to 1D image-array
import numpy as np
from scipy import misc
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
face = misc.imread('face1.jpg');
f=misc.face(gray=True)
[width1,height1]=[f.shape[0],f.shape[1]]
f2=f.reshape(width1*height1);

* * * * * * * *
# image to vector
import numpy as np
from PIL import Image
img = Image.open('orig.png').convert('RGBA')
arr = np.array(img)
# record the original shape
shape = arr.shape
# make a 1-dimensional view of arr
flat_arr = arr.ravel()
# convert it to a matrix
vector = np.matrix(flat_arr)
# do something to the vector
vector[:,::10] = 128
# reform a numpy array of the original shape
arr2 = np.asarray(vector).reshape(shape)
# make a PIL image
img2 = Image.fromarray(arr2, 'RGBA')
img2.show()


* * * * * * * *
import numpy
import Image
def PIL2array(img):
    return numpy.array(img.getdata(),
                    numpy.uint8).reshape(img.size[1], img.size[0], 3)
def array2PIL(arr, size):
    mode = 'RGBA'
    arr = arr.reshape(arr.shape[0]*arr.shape[1], arr.shape[2])
    if len(arr[0]) == 3:
        arr = numpy.c_[arr, 255*numpy.ones((len(arr),1), numpy.uint8)]
    return Image.frombuffer(mode, size, arr.tostring(), 'raw', mode, 0, 1)
def main():
    img = loadImage('foo.jpg')
    arr = PIL2array(img)
    img2 = array2PIL(arr, img.size)
    img2.save('out.jpg')
if __name__ == '__main__':
    main()



* * * * * * * *
# Alternatively, to get a numpy array from an image use:
from PIL import Image
from numpy import array
img = Image.open("input.png")
arr = array(img)
# And to get an image from a numpy array, use:
img = Image.fromarray(arr)
img.save("output.png")


* * * * * * * *
import numpy as np
data = np.array([[1,2,3],[4,5,6],[7,8,9]])
data.shape()
>>> (3,4)
data.reshape(-1)
>>> array([ 1,  2,  3,  4,  5,  6,  7,  8,  9])

* * * * * * * *
I = numpy.asarray(PIL.Image.open('test.jpg')) # Open I as an array
im = PIL.Image.fromarray(numpy.uint8(I)) # convert it back to an image


* * * * * * * *
# using Pillow 4.1.1
from PIL import Image
import numpy as np
im = Image.open('1.jpg')
im2arr = np.array(im) # im2arr.shape: height x width x channel
arr2im = Image.fromarray(im2arr)


* * * * * * * *
import numpy
import PIL
img = PIL.Image.open("foo.jpg").convert("L")
imgarr = numpy.array(img)


* * * * * * * *
import PIL
import numpy
from PIL import Image
def resize_image(numpy_array_image, new_height):
    # convert nympy array image to PIL.Image
    image = Image.fromarray(numpy.uint8(numpy_array_image))
    old_width = float(image.size[0])
    old_height = float(image.size[1])
    ratio = float( new_height / old_height)
    new_width = int(old_width * ratio)
    image = image.resize((new_width, new_height), PIL.Image.ANTIALIAS)
    # convert PIL.Image into nympy array back again
    return array(image)


* * * * * * * *
# http://barnesc.blogspot.com/2007/09/filter-numpy-images-with-fft-python.html
# The Fast Fourier Transform (FFT)
I = numpy.asarray(Image.open('test.jpg'))
I = filter(I, [[-1,0,1],[-2,0,2],[-1,0,1]])/8+128
Image.fromarray(numpy.uint8(I)).show()
