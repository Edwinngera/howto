
///////////////////////////////////////////////
//
// refresh page on modal window close
//
///////////////////////////////////////////////

$( document ).delegate('.modal-dialog button.close',"click",function(){
	location.replace(location.href)
	// https://datatables.net/reference/api/draw()
	// var table = $('#dataTableAdminTickets_').DataTable();
	// table.page( 'next' ).draw( 'page' );
	// var table = $('#dataTableAdminTickets_').DataTable();
	// table.clear();
});


///////////////////////////////////////////////
//
// display confirmation on submit
//
///////////////////////////////////////////////


<form onsubmit="return confirm('Do you really want to submit the form?');">
<script>
function validate(form) {
    // validation code here ...
    if(!valid) {
        alert('Please correct the errors in the form!');
        return false;
    }
    else {
        return confirm('Do you really want to submit the form?');
    }}
</script>
<form onsubmit="return validate(this);">


///////////////////////////////////////////////
//
//  For checkbox status Use jQuery's is() function:
//
///////////////////////////////////////////////

if($("#isAgeSelected").is(':checked'))
    $("#txtAge").show();  // checked
else
    $("#txtAge").hide();  // unchecked


///////////////////////////////////////////////
//
//  The attributes property contains them all:
//
///////////////////////////////////////////////

$(this).each(function() {
  $.each(this.attributes, function() {
    // this.attributes is not a plain object, but an array
    // of attribute nodes, which contain both the name and value
    if(this.specified) {
      console.log(this.name, this.value);
    }
  });
});


///////////////////////////////////////////////
//
// isInteger
//
///////////////////////////////////////////////

Number.isInteger()
if (Number.isInteger(y / x)) {
    return true
}


///////////////////////////////////////////////
//
// outerHTML
//
///////////////////////////////////////////////

https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML
https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML

Get selected element's outer HTML
$("#selectorid").prop("outerHTML")

// or

d = document.getElementById("d");
console.log(d.outerHTML);


///////////////////////////////////////////////
//
// Console colors
//
///////////////////////////////////////////////

https://developer.mozilla.org/de/docs/Web/API/Console
console.log("This is %cMy stylish message", "font-style: italic; background-color: blue;padding: 2px");
console.time("answer time");
console.log("This is %cMy stylish message", "color: white;  background-color: red; padding: 3px");





///////////////////////////////////////////////
//
// Using keyboard shortcuts in Javascript
// Overriding Browser's Keyboard Shortcuts
//
///////////////////////////////////////////////

https://www.catswhocode.com/blog/using-keyboard-shortcuts-in-javascript
https://stackoverflow.com/questions/3680919/overriding-browsers-keyboard-shortcuts
https://unixpapa.com/js/key.html
https://www.w3.org/WAI/UA/work/wiki/Keyboard_Concepts_for_HTML5_Discussion
https://craig.is/killing/mice # A simple library for handling keyboard shortcuts in Javascript
https://developer.mozilla.org/de/docs/Web/API/KeyboardEvent
https://developer.mozilla.org/de/docs/Web/API/KeyboardEvent/altKey
https://www.w3schools.com/jsref/event_key_ctrlkey.asp
https://www.w3schools.com/jsref/event_ctrlkey.asp


document.onkeydown = overrideKeyboardEvent;
document.onkeyup = overrideKeyboardEvent;
var keyIsDown = {};

function overrideKeyboardEvent(e){
  switch(e.type){
    case "keydown":
      if(!keyIsDown[e.keyCode]){
        keyIsDown[e.keyCode] = true;
        // do key down stuff here
      }
    break;
    case "keyup":
      delete(keyIsDown[e.keyCode]);
      // do key up stuff here
    break;
  }
  disabledEventPropagation(e);
  e.preventDefault();
  return false;
}
function disabledEventPropagation(e){
  if(e){
    if(e.stopPropagation){
      e.stopPropagation();
    } else if(window.event){
      window.event.cancelBubble = true;
    }
  }
}

/*

onkeydown = function(e){
  if(e.ctrlKey && e.keyCode == 'S'.charCodeAt(0)){
    e.preventDefault();
    //your saving code
  }
}



document.onkeydown = function () {
    if ((window.event.keyCode == 121) && (window.event.ctrlKey))) {
       window.event.returnValue = false;
       window.event.cancelBubble = true;
       window.event.keyCode = 0;
       return false;
    }
}
*/

// First example, without JQuery:

var isCtrl = false;
document.onkeyup=function(e) {
    if(e.which == 17) isCtrl=false;
}document.onkeydown=function(e){
    if(e.which == 17) isCtrl=true;
    if(e.which == 83 && isCtrl == true) {
         alert('Keyboard shortcuts are cool!');
         return false;
    }
}

// Example with the JQuery framework:

var isCtrl = false;$(document).keyup(function (e) {
if(e.which == 17) isCtrl=false;
}).keydown(function (e) {
    if(e.which == 17) isCtrl=true;
    if(e.which == 83 && isCtrl == true) {
        alert('Keyboard shortcuts + JQuery are even more cool!');
 	return false;
 }
});


/*

Keyboard codes reference
Key	Keyboard code
Backspace	8
Tab	9
Enter	13
Shift	16
Ctrl	17
Alt	18
Pause	19
Capslock	20
Esc	27
Page up	33
Page down	34
End	35
Home	36
Left arrow	37
Up arrow	38
Right arrow	39
Down arrow	40
Insert	45
Delete	46
0	48
1	49
2	50
3	51
4	52
5	53
6	54
7	55
8	56
9	57
a	65
b	66
c	67
d	68
e	69
f	70
g	71
h	72
i	73
j	74
k	75
l	76
m	77
n	78
o	79
p	80
q	81
r	82
s	83
t	84
u	85
v	86
w	87
x	88
y	89
z	90
0 (numpad)	96
1 (numpad)	97
2 (numpad)	98
3 (numpad)	99
4 (numpad)	100
5 (numpad)	101
6 (numpad)	102
7 (numpad)	103
8 (numpad)	104
9 (numpad)	105
*	106
+	107
â€“	109
.	110
/	111
F1	112
F2	113
F3	114
F4	115
F5	116
F6	117
F7	118
F8	119
F9	120
F10	121
F11	122
F12	123
=	187
Coma	188
Slash /	191
Backslash \	220

*/


EXAMPLE

<!DOCTYPE html>
<html>
<head>
<script>
'use strict';

document.addEventListener('keydown', (event) => {
  const keyName = event.key;

  if (keyName === 'Control') {
    // not alert when only Control key is pressed.
    return;
  }

  if (event.ctrlKey) {
    // Even though event.key is not 'Control' (i.e. 'a' is pressed),
    // event.ctrlKey may be true if Ctrl key is pressed at the time.
    alert(`Combination of ctrlKey + ${keyName}`);
  } else {
    alert(`Key pressed ${keyName}`);
  }
}, false);

document.addEventListener('keyup', (event) => {
  const keyName = event.key;

  // As the user release the Ctrl key, the key is no longer active.
  // So event.ctrlKey is false.
  if (keyName === 'Control') {
    alert('Control key was released');
  }
}, false);

</script>
</head>

<body>
</body>
</html>