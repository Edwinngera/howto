##################################
#
# How to install and run WEKA
# http://web.cs.iastate.edu/~jtian/cs573/WWW/Labs/WEKA.htm
# http://www.cs.waikato.ac.nz/ml/weka/downloading.html
# http://facweb.cs.depaul.edu/mobasher/classes/ect584/WEKA/classify.html
#
#################################


mkdir weka
cd weka
ln -s /home/course/cs573x/weka-3-4/weka.jar
java -jar weka.jar
ln -s /home/course/cs573x/weka-3-4/weka
ln -s /home/course/cs573x/weka-3-4/data


The following step is to set the CLASSPATH environment variable prior to use the command line. You need to indicate the location of the weka.jar file.

1) For sh, ksh and bash users:
  Please add "export CLASSPATH=/home/course/cs573x/weka-3-4/weka.jar:$CLASSPATH" into your shell configuration profile.

2) For csh and tcsh users:
  Please add "setenv CLASSPATH /home/course/cs573x/weka-3-4/weka.jar" into your shell configuration profile.

3) To test if it is set correctly:
Type "java weka.classifiers.trees.j48.J48 " (note the change from previous versions, in case you are familiar with any), it should display a list of all learning options for J48. If it displays an exception error message, then you will check if you set the environment variable correctly. Please make sure that you also set the correct path to Java, so that the system can locate and run Java.

Now, the installation is done! You can run WEKA either in command line or in graphic user interface. Remember only in Linux or a Solaris workstation can you run GUI, telnet won't work.


#################################
# Command line package management
# Assuming that the weka.jar file is in the classpath, the package manager can be accessed by typing:
# https://weka.wikispaces.com/How+do+I+use+the+package+manager%3F
#################################
java weka.core.WekaPackageManager

Usage: weka.core.WekaPackageManager [option]
Options:
  -list-packages <all | installed | available>
  -package-info <repository | installed | archive> packageName
  -install-package <packageName | packageZip | URL> [version]
  -uninstall-package <packageName>
  -refresh-cache

#################################
# Generate Nice Statistics
#################################
$ java -cp weka.jar weka.classifiers.trees.J48 -t iris.arff -C 0.25 -M 2 -g GREATER_THAN_SYMBOL decision-tree.dot
$ dot -o decision-tree.png decision-tree.dot -Tpng

#################################
# Commandline Examples
#################################
$ java weka.classifiers.trees.J48 -C 0.25 -M 2 -t directory-path\bank.arff -d directory-path \bank.model
$ java weka.classifiers.trees.J48 -p 9 -l directory-path\bank.model -T directory-path \bank-new.arff
$ java -classpath /"your-weka-path"/weka.jar weka.classifiers.trees.J48 -t data/weather.arff -i


How to create elegant decision trees using Weka and Graphviz
Thales Sehn KÃ¶rting .
https://www.youtube.com/watch?v=8-vHunc4k8s

# API
# http://grepcode.com/file/repo1.maven.org/maven2/nz.ac.waikato.cms.weka/weka-dev/3.7.5/weka/classifiers/trees/J48.java
# http://grepcode.com/file/repo1.maven.org/maven2/nz.ac.waikato.cms.weka/weka-dev/3.7.9/weka/classifiers/trees/RandomTree.java?av=f
# http://www.dbs.ifi.lmu.de/~zimek/diplomathesis/implementations/EHNDs/doc/weka/classifiers/trees/J48.html
# http://www.cs.waikato.ac.nz/~ml/weka/example_code/2ed/MessageClassifier.java
# http://www.programcreek.com/java-api-examples/index.php?api=weka.classifiers.trees.J48
# http://stackoverflow.com/questions/8112041/error-while-using-weka-api-in-java-code-class-attribute-not-set
# http://www.java2s.com/Code/Jar/w/Downloadwekajar.htm
# http://www.java2s.com/Code/Jar/w/Downloadweka370jar.htm
# https://weka.wikispaces.com/file/view/WekaDemo.java
# http://www.csie.ntu.edu.tw/~cjlin/libsvm/

--------------
java weka.classifiers.trees.J48
java -Xmx1024m -jar weka.jar
java -Xmx500m weka.core.Instances data/soybean.arff
# maxheap=2000m

java -cp /pathto/weka.jar weka.classifiers.trees.J48
java -Xmx1G -cp /pathto/weka.jar weka.classifiers.trees.J48
java -Xmx1G -cp /path/to/weka.jar weka.classifiers.trees.J48 -t /path/to/whatever.arff  # -t is for training file

###################################################################
#
# pyWeka
#
# http://pythonhosted.org/python-weka-wrapper/api.html
# http://pythonhosted.org/python-weka-wrapper/commandline.html
#
##################################################################

# Data generators
python weka/datagenerators.py \
    -o /tmp/out.arff \
    weka.datagenerators.classifiers.classification.Agrawal

# Filters
python weka/filters.py \
    -i /my/datasets/iris.arff \
    -o /tmp/out.arff \
    -c last \
    weka.filters.unsupervised.attribute.Remove \
    -R last

# Classifiers
python weka/classifiers.py \
     -t /my/datasets/iris.arff \
     -c last \
     weka.classifiers.trees.J48
     -C 0.3

# Clusterers
pythonn weka/clusterers.py \
    -t /my/datasets/iris.arff \
    -c last \
    weka.clusterers.SimpleKMeans
    -N 3

# Attribute selection
python weka/attribute_selection.py \
    -i /my/datasets/iris.arff \
    -x 5 \
    -n 42 \
    -s "weka.attributeSelection.BestFirst -D 1 -N 5"
    weka.attributeSelection.CfsSubsetEval \
    -P 1 \
    -E 1

# Associators
python weka/associators.py \
    -t /my/datasets/iris.arff \
    weka.associations.Apriori \
    -N 9 -I



Java Virtual Machine
>>> import weka.core.jvm as jvm
>>> jvm.start()
>>> jvm.start(system_cp=True, packages=True)
# >>> jvm.start(packages="/my/packages/are/somwhere/else")
>>> jvm.start(max_heap_size="512m")
>>> jvm.stop()

Option handling
>>> from weka.classifiers import Classifier
>>> cls = Classifier(classname="weka.classifiers.trees.J48")
>>> cls.options = ["-C", "0.3"]

>>> from weka.classifiers import Classifier
>>> cls = Classifier(classname="weka.classifiers.trees.J48", options=["-C", "0.3"])

# v2
>>> from weka.classifiers import Classifier
>>> cls = Classifier(classname="weka.classifiers.trees.J48", options=["-C", "0.3"])
>>> print(cls.options)

Data generators
>>> from weka.datagenerators import DataGenerator
>>> generator = DataGenerator(classname="weka.datagenerators.classifiers.classification.Agrawal", options=["-B", "-P", "0.05"])
>>> DataGenerator.make_data(generator, ["-o", "/some/where/outputfile.arff"])

# v2
>>> generator = DataGenerator(classname="weka.datagenerators.classifiers.classification.Agrawal", options=["-n", "10", "-r", "agrawal"])
>>> generator.dataset_format = generator.define_data_format()
>>> print(generator.dataset_format)
>>> if generator.single_mode_flag:
>>>     for i in xrange(generator.num_examples_act):
>>>         print(generator.generate_example())
>>> else:
>>>     print(generator.generate_examples())

Loaders and Savers
>>> from weka.core.converters import Loader, Saver
>>> loader = Loader(classname="weka.core.converters.ArffLoader")
>>> data = loader.load_file("/some/where/iris.arff")
>>> print(data)
>>> saver = Saver(classname="weka.core.converters.CSVSaver")
>>> saver.save_file(data, "/some/where/iris.csv")

# v2
>>> import weka.core.converters as converters
>>> data = converters.load_any_file("/some/where/iris.arff")
>>> converters.save_any_file("/some/where/else/iris.csv")

Filters
>>> from weka.filters import Filter
>>> data = ...                       # previously loaded data
>>> remove = Filter(classname="weka.filters.unsupervised.attribute.Remove", options=["-R", "last"])
>>> remove.inputformat(data)     # let the filter know about the type of data to filter
>>> filtered = remove.filter(data)   # filter the data
>>> print(filtered)                  # output the filtered data

Classifiers
>>> from weka.classifiers import Classifier, Evaluation
>>> from weka.core.classes import Random
>>> data = ...             # previously loaded data
>>> data.class_is_last()   # set class attribute
>>> classifier = Classifier(classname="weka.classifiers.trees.J48", options=["-C", "0.3"])
>>> evaluation = Evaluation(data)                     # initialize with priors
>>> evaluation.crossvalidate_model(classifier, iris_data, 10, Random(42))  # 10-fold CV
>>> print(evaluation.summary())
>>> print("pctCorrect: " + str(evaluation.percent_correct))
>>> print("incorrect: " + str(evaluation.incorrect))

# v2
>>> from weka.classifiers import Classifier
>>> data = ...             # previously loaded data
>>> data.class_is_last()   # set class attribute
>>> cls = Classifier(classname="weka.classifiers.trees.J48", options=["-C", "0.3"])
>>> cls.build_classifier(data)
>>> for index, inst in enumerate(data):
>>>     pred = cls.classify_instance(inst)
>>>     dist = cls.distribution_for_instance(inst)
>>>     print(str(index+1) + ": label index=" + str(pred) + ", class distribution=" + str(dist))


Clusterers
>>> from weka.clusterers import Clusterer
>>> data = ... # previously loaded dataset
>>> clusterer = Clusterer(classname="weka.clusterers.SimpleKMeans", options=["-N", "3"])
>>> clusterer.build_clusterer(data)
>>> print(clusterer)

# v2
>>> for inst in data:
>>>     cl = clusterer.cluster_instance(inst)  # 0-based cluster index
>>>     dist = clusterer.distribution_for_instance(inst)   # cluster membership distribution
>>>     print("cluster=" + str(cl) + ", distribution=" + str(dist))

Attribute selection
>>> from weka.attribute_selection import ASSearch, ASEvaluation, AttributeSelection
>>> data = ...   # previously loaded dataset
>>> search = ASSearch(classname="weka.attributeSelection.BestFirst", options=["-D", "1", "-N", "5"])
>>> evaluator = ASEvaluation(classname="weka.attributeSelection.CfsSubsetEval", options=["-P", "1", "-E", "1"])
>>> attsel = AttributeSelection()
>>> attsel.search(search)
>>> attsel.evaluator(evaluator)
>>> attsel.select_attributes(data)
>>> print("# attributes: " + str(attsel.number_attributes_selected))
>>> print("attributes: " + str(attsel.selected_attributes))
>>> print("result string:\n" + attsel.results_string)

Associators
>>> from weka.associations import Associator
>>> data = ...   # previously loaded dataset
>>> associator = Associator(classname="weka.associations.Apriori", options=["-N", "9", "-I"])
>>> associator.build_associations(data)
>>> print(associator)

Serialization
>>> import weka.core.serialization as serialization
>>> from weka.classifiers import Classifier
>>> classifier = ...  # previously built classifier
>>> serialization.write("/some/where/out.model", classifier)
>>> ...
>>> classifier2 = Classifier(jobject=serialization.read("/some/where/out.model"))
>>> print(classifier2)


>>> import weka.core.serialization as serialization
>>> from weka.classifiers import Classifier
>>> from weka.core.dataset import Instances
>>> classifier = ...  # previously built Classifier
>>> data = ... # previously loaded/generated Instances
>>> serialization.write_all("/some/where/out.model", [classifier, Instances.template_instances(data)])
>>> ...
>>> objects = serialization.read_all("/some/where/out.model")
>>> classifier2 = Classifier(jobject=objects[0])
>>> data2 = Instances(jobject=objects[1])
>>> print(classifier2)
>>> print(data2)
----------------------------------------------------------------------------
Experiments

Example for performing a cross-validated classification experiment:

>>> from weka.experiments import SimpleCrossValidationExperiment, SimpleRandomSplitExperiment, Tester, ResultMatrix
>>> from weka.classifiers import Classifier
>>> import weka.core.converters as converters
>>> # configure experiment
>>> datasets = ["iris.arff", "anneal.arff"]
>>> classifiers = [Classifier(classname="weka.classifiers.rules.ZeroR"), Classifier(classname="weka.classifiers.trees.J48")]
>>> outfile = "results-cv.arff"   # store results for later analysis
>>> exp = SimpleCrossValidationExperiment(
>>>     classification=True,
>>>     runs=10,
>>>     folds=10,
>>>     datasets=datasets,
>>>     classifiers=classifiers,
>>>     result=outfile)
>>> exp.setup()
>>> exp.run()
>>> # evaluate previous run
>>> loader = converters.loader_for_file(outfile)
>>> data   = loader.load_file(outfile)
>>> matrix = ResultMatrix(classname="weka.experiment.ResultMatrixPlainText")
>>> tester = Tester(classname="weka.experiment.PairedCorrectedTTester")
>>> tester.resultmatrix = matrix
>>> comparison_col = data.attribute_by_name("Percent_correct").index
>>> tester.instances = data
>>> print(tester.header(comparison_col))
>>> print(tester.multi_resultset_full(0, comparison_col))


Regression experiments on random splits on the datasets:

>>> from weka.experiments import SimpleCrossValidationExperiment, SimpleRandomSplitExperiment, Tester, ResultMatrix
>>> from weka.classifiers import Classifier
>>> import weka.core.converters as converters
>>> # configure experiment
>>> datasets = ["bolts.arff", "bodyfat.arff"]
>>> classifiers = [Classifier(classname="weka.classifiers.rules.ZeroR"), Classifier(classname="weka.classifiers.functions.LinearRegression")]
>>> outfile = "results-rs.arff"   # store results for later analysis
>>> exp = SimpleRandomSplitExperiment(
>>>     classification=False,
>>>     runs=10,
>>>     percentage=66.6,
>>>     preserve_order=False,
>>>     datasets=datasets,
>>>     classifiers=classifiers,
>>>     result=outfile)
>>> exp.setup()
>>> exp.run()
>>> # evaluate previous run
>>> loader = converters.loader_for_file(outfile)
>>> data   = loader.load_file(outfile)
>>> matrix = ResultMatrix(classname="weka.experiment.ResultMatrixPlainText")
>>> tester = Tester(classname="weka.experiment.PairedCorrectedTTester")
>>> tester.resultmatrix = matrix
>>> comparison_col = data.attribute_by_name("Correlation_coefficient").index
>>> tester.instances = data
>>> print(tester.header(comparison_col))
>>> print(tester.multi_resultset_full(0, comparison_col))


Packages
# refresh package cache
import weka.core.packages as packages
packages.refresh_cache()

# list all packages (name and URL)
items = packages.all_packages()
for item in items:
    print(item.name + " " + item.url)

# install CLOPE package
packages.install_package("CLOPE")
items = packages.installed_packages()
for item in items:
    print(item.name + " " + item.url)

# uninstall CLOPE package
packages.uninstall_package("CLOPE")
items = packages.installed_packages()
for item in items:
    print(item.name + " " + item.url)
