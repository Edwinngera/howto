
#############################

git checkout develop
Your branch is behind 'origin/develop' by 2 commits, and can be fast-forwarded.
Your branch is behind  commits, and can be fast-forwarded.

git branch -a

  develop
  master

git branch -b <new_branch>

find . -name "*.php" -exec grep -Hni "phpmailer" --color {} \;

---

Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	new file:   htdocs/css/jquery-ui-1.12.0.custom.css
#	new file:   htdocs/javascript/jquery/jquery-ui-1.12.1.custom.js
#
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   htdocs/css/jquery-ui-1.12.0.custom.css
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	htdocs/test.php




git commit -a -m "scripts" test.php    # single file
git commit -m "scripts"  test.php    test2.php    # multiple files


#########################################################
#
# Your branch is ahead of 'origin/master' by x commits FIX
# http://stackoverflow.com/questions/16288176/your-branch-is-ahead-of-origin-master-by-3-commits
#
#########################################################


git reset --hard origin/master

# 4 simple commands
git checkout <branch_name>
git pull -s recursive -X theirs
git status
git reset --hard origin/<branch_name>
git fetch

# git push origin branch
# git pull origin branch

# git fetch origin other-branch && git merge other-branch
# git fetch origin other-branch
# git fetch
# git pull -- pull is a combination of fetch and merge

$ git merge origin/other-branch
# Fix merge conflicts, if they occur
# Add merge conflict fixes
$ git commit  # And commit the merge!

--------------------------------------------------------------
https://apps.ubuntu.com/cat/applications/xpad/
todo / sticky note application for X
--------------------------------------------------------------
/etc/aliases
/etc/passwd

Create a file named ~/.ssh/config and put this in there:

Host h
User christopher
HostName my.domain.top
Now you only have to type ssh h and it does the same thing!

You can also use a wildcard:

Host *
User christopher

--------------------------------------------------------------
git ls-files -m
git status | grep modified
git status -uno
git status -s | grep '^M'
git status -s | awk '{if ($1 == "M") print $2}'
git status -s | awk '$1 == "M" { print $2 }'
git diff --name-only
git diff --name-only --diff-filter=M
git log -n1 --oneline --name-status | grep '^M'
https://git-scm.com/docs/git-status/1.7.0

# https://git-scm.com/docs/git-checkout

--------------------------------------------------------------
#brew upgrade
#brew update -v
#brew --config
--------------------------------------------------------------
ls -ld /usr/local
ls -lA /usr/local
find /usr/local -user root
cd /usr/local
git branch
git status
git stash -p
git shelve
---------
$ git --version
git version 1.7.5.4
$ which git
/usr/bin/git
------
git add
git commit -a
git help status
git status -uno
git status -s # short format
git status -b # branch format
--------------------------------------------------------------
# rebase stash

git status
git stash
#git stash list
#git stash apply
#git stash apply --index
git pull -r
#git pull --rebase
git stash pop

---
git stash -u             	# This will stash everything, including unstaged files
git stash pop stash@{1}  	# This will apply your original stash
git stash drop 			# remove your "safe" stash.
git stash drop [stash-id] 	# (default is the latest stash, see all with git stash list).

----

usage: git stash list [<options>]
   or: git stash show [<stash>]
   or: git stash drop [-q|--quiet] [<stash>]
   or: git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
   or: git stash branch <branchname> [<stash>]
   or: git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
                       [-u|--include-untracked] [-a|--all] [<message>]]
   or: git stash clear

--------------------------------------------------------------
# Show what git will be remove
git clean -n

# If all is good
git clean -f

# If not all is good, see
git clean --help

# Finish
git stash pop
--------------------------------------------------------------
#unstash

git stash show -p stash@{0} | git apply -R
git stash show -p | git apply -R

git config --global alias.stash-unapply '!git stash show -p | git apply -R'
$ git stash apply
$ #... work work work
$ git stash-unapply

git stash branch testchanges

------------------------------------------------
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

git config core.fscache true 	# Enable the filesystem cache
git config core.ignoreStat true # Avoid inspecting large working trees
------------------------------------------------
git log --graph --all
------------------------------------------------

git rm --cached .idea/*

git commit -a
git add -u
git reset HEAD path/to/file
git commit

git commit -a
git update-index --assume-unchanged <file>
git update-index --no-assume-unchanged <file>

git status
git update-index --assume-unchanged README.textile
git update-index --no-assume-unchanged README.textile

git update-index --assume-unchanged [<file>...]
git update-index --skip-worktree [<file>...]
git update-index --no-assume-unchanged my-file.php

git config --global alias.ignore 'update-index --skip-worktree'
git config --global alias.unignore 'update-index --no-skip-worktree'
git config --global alias.ignored '!git ls-files -v | grep "^S"'

------------------------------------------------

# remove

git rm --cached file1 file2 dir/file3
git rm --cached `git ls-files -i --exclude-from=.gitignore`
#git ls-files -i --exclude-from=.gitignore | xargs git rm --cached
#git ls-files -i -z --exclude-from=.gitignore | xargs -0 git rm --cached
#git ls-files -i --exclude-from=.gitignore | %{git rm --cached $_}

git rm --cached .
git rm -r --cached .
git add .
git commit -m "Removing all files in .gitignore"

git clean -h
git clean -xdn

--------------------------------------------------------------
https://git-scm.com/book/en/v1/Git-Tools-Stashing
https://git-scm.com/book/en/v1/Git-Tools-Stashing
http://de.gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html
https://git-scm.com/docs/git-update-index
https://git-scm.com/docs/git-status
https://git-scm.com/docs/git-check-ignore
https://git-scm.com/docs/gitignore
http://lilypond.org/doc/v2.18/Documentation/contributor/pulling-and-rebasing
https://git-scm.com/book/en/v2/Git-Branching-Rebasing
https://git-scm.com/docs/git-status
https://plugins.jetbrains.com/idea/plugin/7495--ignore
--------------------------------------------------------------
http://php.net/manual/de/migration70.new-features.php
https://help.github.com/articles/testing-your-ssh-connection/
https://git-scm.com/docs/git-merge
http://stackoverflow.com/questions/28444011/how-do-i-ensure-that-my-local-branch-tracking-remote-is-identical-without-additi
--------------------------------------------------------------
http://stackoverflow.com/questions/28444011/how-do-i-ensure-that-my-local-branch-tracking-remote-is-identical-without-additi
http://stackoverflow.com/questions/3564598/remove-file-from-commit
https://nathanhoad.net/git-amend-your-last-commit
http://stackoverflow.com/questions/30983500/how-to-save-changes-when-in-detached-head-state
http://stackoverflow.com/questions/15754335/git-clone-is-too-slow
http://stackoverflow.com/questions/6802145/convert-shallow-clone-to-full-clone
http://stackoverflow.com/questions/35509581/how-to-unshallow-a-clone-without-unshallow
https://git-scm.com/docs/git-fetch
--------------------------------------------------------------
https://gitlab.com/gitlab-com/infrastructure/issues/290
https://gitlab.com/gitlab-com/infrastructure/issues/290
--------------------------------------------------------------
http://www.smarty.net/docs/en/language.variables.smarty.tpl
http://www.smarty.net/docsv2/de/language.variables.smarty.tpl

-------------
Intel(R) Xeon(R) CPU X3370 @ 3.00GHz vs Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz

http://www.cpu-world.com/Compare/218/Intel_Core_i7_i7-3770K_vs_Intel_Xeon_X3370.html
https://www.cpubenchmark.net/singleThread.html
http://codeception.com/docs/05-UnitTests


------------------------

http://www.smarty.net/docs/en/language.function.html.select.date.tpl
http://stackoverflow.com/questions/2431763/how-to-debug-variables-in-smarty-like-in-php-var-dump.


--------------------------------------------------------------
https://blog.jqueryui.com/2016/09/jquery-ui-1-12-1/
https://jqueryui.com/download/all/
https://code.jquery.com/ui/
https://api.jqueryui.com/1.12/theming/css-framework/
https://jqueryui.com/upgrade-guide/1.12/
http://jqueryui.com/dialog/#modal-message
https://api.jqueryui.com/dialog/#option-dialogClass
https://jqueryui.com/dialog/#modal-confirmation
--------------------------------------------------------------
https://dev.mysql.com/doc/refman/5.7/en/commit.html
https://dev.mysql.com/doc/refman/5.7/en/create-trigger.html
https://ftp-stud.hs-esslingen.de/Mirrors/cdimage.ubuntu.com/lubuntu/releases/14.04/release/
https://dev.mysql.com/downloads/workbench/5.2.html
https://www.adminer.org/#download
https://appdb.winehq.org/appview.php?iAppId=3326
https://shlomi-noach.github.io/awesome-mysql/
https://www.wired.com/2008/12/top-5-disruptiv/
https://www.kvraudio.com/product/koblo-studio-by-koblo
https://twitter.com/DisruptiveNL
--------------------------------------------------------------
https://en.wikipedia.org/wiki/Disruptive_innovation
https://de.wikipedia.org/wiki/Disruptive_Technologie
http://www.openmediavault.org/








