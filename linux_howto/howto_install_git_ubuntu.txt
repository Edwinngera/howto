
#############################################
#Install Git with apt-get:
#############################################

sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git

#or sudo apt-get install git-core # How to Install Git with Apt-Get

#############################################
#How to Install Git from Source
#############################################

sudo apt-get update
sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev build-essential
wget https://git-core.googlecode.com/files/git-1.8.1.2.tar.gz
tar -zxf git-1.8.1.2.tar.gz
cd git-1.8.1.2
make prefix=/usr/local all
sudo make prefix=/usr/local install
git clone git://git.kernel.org/pub/scm/git/git.git

#############################################
#Config Git:
#############################################

su git

git config --global user.name "Criss"
git config --global user.email "criss@blabla.de"

git config --list
// git commit --amend --reset-author
git --version

#############################################
# Create folder git in home:
#############################################

#Create a bare (empty) repository for our project

mkdir ~/Repos; cd ~/Repos
mkdir wonderproject.git
cd wonderproject.git
git init --bare #create git structurte

#mkdir ~/GitProjects; cd ~/GitProjects


mkdir ~/SGProjects
cd ~/SGProjects
git init # create git for clone folder

#############################################
# Get local ip
#############################################

ip addr show eth0 # get eth ip
ip addr show wlan0 # get wlan ip

#############################################
# install ssh
#############################################

#variant 1
sudo apt-get install ssh # install shh if not installed
sudo nano /etc/ssh/sshd_config # add "AllowGroups sshusers"
sudo adduser git sshusers

#variant 2
sudo apt-get install openssh-server openssh-client
ps -ef | grep ssh
ssh localhost # your password

#############################################
# create ssh key
#############################################

#Goto the home directory and execute the below ssh-keygen command
#$ cd
#$ ssh-keygen -t rsa

ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/criss/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/criss/.ssh/id_rsa.
Your public key has been saved in /home/criss/.ssh/id_rsa.pub.
The key fingerprint is:
dc:05:82:50:51:7d:1e:af:54:12:bb:e3:f3:4a:bf:50 criss@Pro
The key's randomart image is:
+--[ RSA 2048]----+
|    .oo=. .      |
|      o ..o.     |
|         o o.    |
|       .+B+o     |
+-----------------+


#check dir ssh
~/.ssh$ ls -lrt

#create a new file called authorized_keys2 in .ssh folder and copy the contents of id_rsa.pub.
cat id_rsa.pub >> authorized_keys2
$ ssh localhost

ssh criss@localhost

$ ssh-keygen
$ touch ~/.ssh/authorized_keys
$ chmod 0600 ~/.ssh/authorized_keys

#############################################

    cd
    sudo cp .ssh/id_rsa_git.pub ~git/.ssh/authorized_keys

#If doesn't work, open an other console:
   sudo su - git
   cd
   mkdir .ssh

#You can close this console.

    sudo chown git:git ~git/.ssh/authorized_keys
    sudo chmod 600 ~git/.ssh/authorized_keys



#############################################
# Clone git
#############################################

git remote add origin ssh://git@192.168.1.6/home/git/Repos/wonderproject.git
git clone ssh://criss@192.168.1.6/home/criss/Repos/wonderproject.git

#############################################
# PHP STORM SETTINGS
#############################################

#From where to clone with phpstorm
/home/criss/Repos/sugarcrm.git

#Parent dir
/home/criss/PhpstormProjects/SGProjects

#Dir
wonderproject

#############################################
# Checkout git
#############################################

Vew all existing branches by typing the following:
git branch -a

Create a new branch, named develop, type the following:
git checkout -b develop
// git checkout develop

Assuming we do not yet have a branch named "develop", the output would be as follows:
Switched to a new branch 'develop'

Switch back and forth between your two branches:
git checkout master
//or git checkout develop

#############################################
Making changes to our develop branch
#############################################

Create a new blank file:
touch develop

Add the "develop" file to git:
git add develop

Commit file:
git commit -m "develop file" develop

Confirm that we are currently on the develop branch:
git branch

Running the "ls" command will show us that the two files exist:
ls

#############################################
Merging code between branches
#############################################

After we switch back to our master branch, which we can do with the git checkout command:
git checkout master

Check if master branch is:
git branch

Running "ls" again, it appears that our new file is missing.

Merge changes from the develop branch to the master branch:
git merge develop --no-ff

Push changes:
git push


#############################################
# more git commands
#############################################

Use different name and email address:
git config --global user.name "Your Name"
git config --global user.email you@example.com

Add project files to Git: –
git add wonderproject.c
git commit -m "First commit!"

Upload changes to master branch on the server:
git push origin master

Check log changes:
git log

Details on remote repository:
git remote show origin

Get changes that other users have made:
git pull origin

You can then make changes to the project and sync your changes with the remote master branch with: –
git push origin

#############################################
# Alternatives to watch files in linux
#############################################

Grunt
http://moduscreate.com/get-up-and-running-with-grunt-js/
https://github.com/fyfey/sugar7-dev
http://gruntjs.com/

Nagios
http://www.nagios.org/

AppArmor
https://help.ubuntu.com/community/AppArmor

Auditd
http://www.linuxscrew.com/2012/07/04/track-file-changes-auditd/
--------------------------


##########################################
# Add git project
# http://joshua14.homelinux.org/blog/?tag=git
##########################################

sudo useradd git; sudo passwd git
su - git
sudo apt-get install git
mkdir ~/Repos; cd ~/Repos
mkdir wonderproject.git; cd wonderproject.git
git init --bare
mkdir ~/GitProjects; cd ~/GitProjects
git init
git remote add origin ssh://git@192.168.1.6/home/git/Repos/wonderproject.git
git clone ssh://git@192.168.1.6/home/git/Repos/wonderproject.git

touch wonderproject.c;
git add wonderproject.c ;

git config --global user.name "User"
git config --global user.email user@example.de

git commit -m "First commit!"

git log
git remote show origin

git pull origin
git push origin



##########################################
#
# Develop and Branches
#
##########################################

Create file

	echo "Test Text" >> contributors.txt
	git add contributors.txt
	git commit -m 'Initial commit with contributors'
	git push -u origin master


Create Bracnh

	git branch -a
	git checkout -b myfeature develop  #build
	git checkout myfeature

	git checkout develop
	git merge --no-ff myfeature
	git branch -d myfeature #delete
	$ git push origin develop


Creating a release branch

	git checkout -b release-1.2 develop
	git checkout master
	git merge --no-ff release-1.2
	git commit -a -m "Bumped version number to 1.2"
	git tag -a 1.2
	git push origin master
	git push -u origin master
	git push -u origin release-1.2

Create hotfix

	git checkout -b hotfix-1.2.1 master
	git commit -a -m "Bumped version number to 1.2.1"
	git commit -m "Fixed severe production problem"

Push Tags

	git fetch && git checkout release-1.2
    git tag -a 1.2.0 release-1.2
    git push --follow-tags

Check Difference

	git diff --name-status master brachname
	git diff --stat --color master brachname
	#git difftool -d master brachname # is using meld diff-checker





http://nvie.com/posts/a-successful-git-branching-model/
https://de.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow
http://nvie.com/files/Git-branching-model.pdf

--



git checkout develop
git merge --no-ff release-1.2
git branch -d release-1.2

##########################################
#
# GIT restore old version
#
##########################################

#remove files from commit
git rm -r --cached .idea/
git rm -f  --cached .gitignore
git rm file.txt removes the file from the repo but also deletes it from the local file system.

# restore old version - redo
git revert 2757d8d

#jump to version
#https://de.atlassian.com/git/tutorials/undoing-changes/git-reset
#https://blog.seibert-media.net/blog/2015/09/07/git-tipps-reset-checkout-und-revert-fuer-fortgeschrittene-teil-2/
#http://rypress.com/tutorials/git/undoing-changes
#https://github.com/blog/2019-how-to-undo-almost-anything-with-git
git checkout 2757d8d

#make a branch with old version
git checkout -b old-state 0d1d7fc32

#show versions Commit Checksums
git log --oneline

#ignore
#https://git-scm.com/docs/gitignore
#cat .gitignore
#touch .gitignore
# exclude everything except directory foo/bar
/*
!/foo
/foo/*
!/foo/bar




------------------------------
StackOverFlow Topics
------------------------------
# How to delete a Git branch both locally and remotely
git branch -d branch_name
git push origin --delete <branchName>
git push origin :<branchName>
-------------------------------
# Edit an incorrect commit message in Git
git commit --amend
git commit --amend -m "New commit message"

git push <remote> <branch> --force
# Or
git push <remote> <branch> -f
----------------------------------------------
# How to undo last commit(s) in Git
$ git commit -m "Something terribly misguided"              (1)
$ git reset HEAD~                                           (2)
<< edit files as necessary >>                               (3)
$ git add ...                                               (4)
$ git commit -c ORIG_HEAD                                   (5)
----------------------------------------------
# What are the differences between 'git pull' and 'git fetch'
# In the simplest terms, git pull does a git fetch followed by a git merge.
----------------------------------------------
# How to rename a local Git branch?
git branch -m <oldname> <newname>
git branch -m <newname>
----------------------------------------------
# How to checkout a remote Git branch
git fetch
git checkout test



##########################################################################
#
#	How To Use Git Commands From Linux Terminal by By Mohammad Forhad Iftekher
#	https://www.unixmen.com/use-git-commands-linux-terminal/
#
##########################################################################


sudo apt-get install git

git config --global user.name "Mf Iftekher"
git config --global user.email xyz@xyz.com

git config --list
git clone https://gitlab.com/xyz/abc.git

git init
git status

vim demo.txt
git add demo.txt
git commit -m 'first commit'
git commit -m 'second commit'
git push

git rm documentation.txt
git commit -m "documentation.txt  file removed"
git push

git reset --hard commit number/HEAD
sudo git stash
git pull
git log
git branch

