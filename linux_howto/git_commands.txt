#brew upgrade
#brew update -v
#brew --config

------------
ls -ld /usr/local
ls -lA /usr/local
find /usr/local -user root
cd /usr/local
git branch
git status
git stash -p
git shelve
---------
$ git --version
git version 1.7.5.4
$ which git
/usr/bin/git
------
git add
git commit -a
git help status
git status -uno
git status -s # short format
git status -b # branch format

------------------------
# rebase stash

git status
git stash
#git stash list
#git stash apply
#git stash apply --index
git pull -r
#git pull --rebase
git stash pop

---
git stash -u             	# This will stash everything, including unstaged files
git stash pop stash@{1}  	# This will apply your original stash
git stash drop 			# remove your "safe" stash.
git stash drop [stash-id] 	# (default is the latest stash, see all with git stash list).

----

usage: git stash list [<options>]
   or: git stash show [<stash>]
   or: git stash drop [-q|--quiet] [<stash>]
   or: git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
   or: git stash branch <branchname> [<stash>]
   or: git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
                       [-u|--include-untracked] [-a|--all] [<message>]]
   or: git stash clear



---
# Show what git will be remove
git clean -n

# If all is good
git clean -f

# If not all is good, see
git clean --help

# Finish
git stash pop

-----------------------------


#rebase error
#Cannot rebase: Your index contains uncommitted changes.
#You have unstaged changes.
#Please commit or stash them.

git status
#git checkout -- <file name>
git reset --hard
git stash
git pull --rebase
#git pull --no-rebase
git stash apply stash@{0}
git stash pop
#git stash applies
#git fetch && git merge --ff-only origin/master
git checkout somebranch

git update-index -q --ignore-submodules --refresh
git diff-files --ignore-submodules
git diff-index --cached --ignore-submodules HEAD --

git fetch
git rebase -p origin/master


-----------------------------------

#unstash

git stash show -p stash@{0} | git apply -R
git stash show -p | git apply -R

git config --global alias.stash-unapply '!git stash show -p | git apply -R'
$ git stash apply
$ #... work work work
$ git stash-unapply

git stash branch testchanges

------------------------------------------------
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

git config core.fscache true 	# Enable the filesystem cache
git config core.ignoreStat true # Avoid inspecting large working trees
------------------------------------------------

git log --graph --all

------------------------------------------------

git rm --cached .idea/*

git commit -a
git add -u
git reset HEAD path/to/file
git commit

git commit -a
git update-index --assume-unchanged <file>
git update-index --no-assume-unchanged <file>

git status
git update-index --assume-unchanged README.textile
git update-index --no-assume-unchanged README.textile


git update-index --assume-unchanged [<file>...]
git update-index --skip-worktree [<file>...]
git update-index --no-assume-unchanged my-file.php

git config --global alias.ignore 'update-index --skip-worktree'
git config --global alias.unignore 'update-index --no-skip-worktree'
git config --global alias.ignored '!git ls-files -v | grep "^S"'

------------------------------------------------

# remove

git rm --cached file1 file2 dir/file3
git rm --cached `git ls-files -i --exclude-from=.gitignore`
#git ls-files -i --exclude-from=.gitignore | xargs git rm --cached
#git ls-files -i -z --exclude-from=.gitignore | xargs -0 git rm --cached
#git ls-files -i --exclude-from=.gitignore | %{git rm --cached $_}

git rm --cached .
git rm -r --cached .
git add .
git commit -m "Removing all files in .gitignore"

git clean -h
git clean -xdn

----------------------------
https://git-scm.com/book/en/v1/Git-Tools-Stashing
https://git-scm.com/book/en/v1/Git-Tools-Stashing
http://de.gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html
https://git-scm.com/docs/git-update-index
https://git-scm.com/docs/git-status
https://git-scm.com/docs/git-check-ignore
https://git-scm.com/docs/gitignore
http://lilypond.org/doc/v2.18/Documentation/contributor/pulling-and-rebasing
https://git-scm.com/book/en/v2/Git-Branching-Rebasing
https://git-scm.com/docs/git-status
https://plugins.jetbrains.com/idea/plugin/7495--ignore

---------------

https://marklodato.github.io/visual-git-guide/index-de.html
https://www.frank-rahn.de/git-mit-github/
https://www.ralfebert.de/git/commits-nachbessern/
https://git-scm.com/book/de/v1/Git-Grundlagen-%C3%84nderungen-r%C3%BCckg%C3%A4ngig-machen

http://php.net/manual/de/migration70.new-features.php
https://help.github.com/articles/testing-your-ssh-connection/
https://git-scm.com/docs/git-merge
http://stackoverflow.com/questions/28444011/how-do-i-ensure-that-my-local-branch-tracking-remote-is-identical-without-additi



http://stackoverflow.com/questions/28444011/how-do-i-ensure-that-my-local-branch-tracking-remote-is-identical-without-additi
http://stackoverflow.com/questions/3564598/remove-file-from-commit
https://nathanhoad.net/git-amend-your-last-commit
http://stackoverflow.com/questions/30983500/how-to-save-changes-when-in-detached-head-state
http://stackoverflow.com/questions/15754335/git-clone-is-too-slow
http://stackoverflow.com/questions/6802145/convert-shallow-clone-to-full-clone
http://stackoverflow.com/questions/35509581/how-to-unshallow-a-clone-without-unshallow
https://git-scm.com/docs/git-fetch

https://gitlab.com/gitlab-com/infrastructure/issues/290
https://gitlab.com/gitlab-com/infrastructure/issues/290

