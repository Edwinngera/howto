/////////////////////////////////////////////////////////////////////////////
//
// Linux commands collection part1 ( www.commandlinefu.com )
//
// ---------------------------------------------------
// http://www.commandlinefu.com/commands/browse
//
/////////////////////////////////////////////////////////////////////////////

*
*
*
*
*
*

----------------------------------------

wget -r -l1 --no-parent -nH -nd -P/tmp -A".gif,.jpg" http://example.com/images
#Download all images from a site

for file in `ls *.pdf`; do convert -verbose -colorspace RGB -resize 800 -interlace none -density 300 -quality 80 $file `echo $file | sed 's/\.pdf$/\.jpg/'`; done
#Convert PDF to JPG

convert *.jpg output.pdf
#Create a single PDF from multiple images with ImageMagick

rename 's/\.jpe?g$/.jpg/i' *
#Rename all .jpeg and .JPG files to have .jpg extension

for f in *.flv; do ffmpeg -y -i "$f" -f image2 -ss 10 -vframes 1 -an "${f%.flv}.jpg"; done
#for all flv files in a dir, grab the first frame and make a jpg.

rename 's/\d+/sprintf("%04d",$&)/e' *.jpg
#Numeric zero padding file rename

find . -iname '*.jpg' -exec echo '<img src="{}">' \; > gallery.html
#Quick HTML image gallery from folder contents

find . -name "*jpg" -exec jpeginfo -c {} \; | grep -E "WARNING|ERROR"
#Find corrupted jpeg image files

wget -nv http://en.wikipedia.org/wiki/Linux -O- | egrep -o "http://[^[:space:]]*.jpg" | xargs -P 10 -r -n 1 wget -nv
#Parallel file downloading with wget

curl http://sohowww.nascom.nasa.gov/data/realtime/eit_195/512/latest.jpg | xli -onroot -fill stdin
#Amazing real time picture of the sun in your wallpaper

diff <(exiftool img_1.jpg) <(exiftool img_2.jpg)
#diff the outputs of two programs

for file in *.jpg; do convert "$file" -resize 800000@ -quality 80 "small.$file"; done
#resize all JPG images in folder and create new images (w/o overwriting)

zmv '(<1->).jpg' '${(l:3::0:)1}.jpg'
#Adding leading zeros to a filename (1.jpg -> 001.jpg)

find /path/to/images -name '*.JPG' -exec rename "s/.JPG/.jpg/g" \{\} \;
#Rename .JPG to .jpg recursively

find /path/to/images -name '*.JPG' -exec bash -c 'mv "$1" "${1/%.JPG/.jpg}"' -- {} \;
#Rename .JPG to .jpg recursively

rename "s/ *//g" *.jpg
#Replace space in filename

display "$(wget -q http://dynamic.xkcd.com/comic/random/ -O - | grep -Po '(?<=")http://imgs.xkcd.com/comics/[^"]+(png|jpg)')"
#random xkcd comic

for f in *.jpg; do exif --ifd=0 --tag=0x0110 --set-value="LOMO LC-A" --output=$f $f; exif --ifd=0 --tag=0x010f --set-value="LOMO" --output=$f $f; done }
#change exif data in all jpeg's

for i in ???.jpg; do mv $i $(printf %04d $(basename $i .jpg) ).jpg ; done
#Rename all (jpg) files written as 3 number in 4 numbers.

echo -n 'targets = $(subst .png,.jpg,$(wildcard *.png))\n$(targets):\n convert $(subst .jpg,.png,$@) $@ \nall : $(targets)' | make -j 4 -f - all
#'hpc' in the shell - starts a maximum of n compute commands modulo n controlled in parallel, using make

mencoder "mf://*.jpg" -mf fps=8 -o ./video.avi -ovc lavc
#create a .avi with many .jpg

convert sample.pdf sample.jpg
#convert pdf to graphic file format (jpg , png , tiff ... )

thumbnail() { ffmpeg -itsoffset -20 -i $i -vcodec mjpeg -vframes 1 -an -f rawvideo -s 640x272 ${i%.*}.jpg }
#Create a thumbnail from a video file

identify -format "%wx%h" /path/to/image.jpg
#Determine an image's dimensions

i=0; f=$(find . -type f -iregex ".*jpg");c=$(echo $f|sed "s/ /\n/g"| wc -l);for x in $f;do i=$(($i + 1));echo "$x $i of $c"; mogrify -strip $x;done
#Remove EXIF data from images with progress

convert -resize 200 -sharpen 40 some_file.pdf[0] some_file.jpg
#Make a thumbnail image of first page of a PDF.

curl http://www.reddit.com/r/wallpapers.rss | grep -Eo 'http:[^&]+jpg' | head -1 | xargs feh --bg-seamless
#set desktop background to highest-rated image from Reddit /r/wallpapers

mutt your@email_address.com -s "Message Subject Here" -a attachment.jpg </dev/null
#Send a local file via email

find . -iname "*.jpg" -print0 | tr '[A-Z]' '[a-z]' | xargs -0 cp --backup=numbered -dp -u --target-directory {location} &
#Find jpeg images and copy them to a central location

find . -name '*'.tiff -exec bash -c "mogrify -format jpg -quality 85 -resize 75% {} && rm {}" \;
#Recursively Find Images, Convert to JPEGS and Delete

jhead -n%Y%m%d-%H%M%S *.jpg
#Picture Renamer

identify -verbose *.jpg|grep "\(Image:\|Resolution\)"
#Identify name and resolution of all jpgs in current directory

curl -O http://hosted.met-art.com/generated_gallery/full/061606AnnaUkrainePasha/met-art-free-sample-00[00-19].jpg
#bulk dl files based on a pattern

for i in *.pdf ; do convert "$i" "${i%.*}.jpg" ; done
#Convert multiple pdf's to jpg in linux using the convert command

ls *.jpg | awk -F'.' '{ printf "%s %04d.%s\n", $0, $1, $2; }' | xargs -n2 mv
#Numeric zero padding file rename

montage 2007-08-25-3685.jpg +clone -clone 0-1 -clone 0-3 -geometry 500 -frame 5 output.jpg
#Repeat a portrait eight times so it can be cut out from a 6"x4" photo and used for visa or passport photos

ls foo*.jpg | awk '{print("mv "$1" "$1)}' | sed 's/foo/bar/2' | /bin/sh
#Batch File Rename with awk and sed

mogrify -format jpg -quality 80 -resize 800 *.jpg
#Resize photos without changing exif

rename .JPG .jpg *.JPG
#Change the extension of a filename by using rename to convert

for file in *.pdf; do convert -verbose -colorspace RGB -resize 800 -interlace none -density 300 -quality 80 "$file" "${file//.pdf/.jpg}"; done
#Convert PDF to JPG

for i in *.JPG; do convert -resize 1000x1000 -quality 85 $i `basename $i .png`-klein.png; done
#resize all images in a folder

find . -iname "*.jpg" -printf '<img src="%f" title="%f">\n' > gallery.html
#Quick HTML image gallery

identify -format '%w %h %f\n' *.jpg | awk 'NF==3&&$1<500&&$2<500{print $3}' | xargs -r rm
#remove *.jpg smaller than 500x500

ffmpeg -ss 5 -i video.avi -vframes 1 -s 320x240 thumb.jpg
ffmpeg -itsoffset -4 -i test.avi -vcodec mjpeg -vframes 1 -an -f rawvideo -s 320x240 test.jpg
#Video thumbnail

curl --silent -O "http://www.somewebsite.com/imagedir/image_[00-99].jpg"
#Download a numbered sequence of files

convert -compress jpeg *.jpg mydoc.pdf
#Generate a (compressed) pdf from images ImageMagick

find -iname '*.jpg' -print0 | xargs -0 feh -d
#View all images

find . -iname '*.jpg' | sed 's/.*/<img src="&">/' > gallery.html
#Quick HTML image gallery

ls *.jpg | grep -n "" | sed 's,.*,0000&,' | sed 's,0*\(...\):\(.*\).jpg,mv "\2.jpg" "image-\1.jpg",' | sh
#rename all jpg files with a prefix and a counter

gs -dNOPAUSE -sDEVICE=jpeg -r144 -sOutputFile=p%03d.jpg file.pdf
#Convert PDF to JPEG using Ghostscript

mogrify -geometry 800x600 *.jpg
#Quickly batch resize images

wget 'link of a Picasa WebAlbum' -O - |perl -e'while(<>){while(s/"media":{"content":\[{"url":"(.+?\.JPG)//){print "$1\n"}}' |wget -w1 -i -
#Go get those photos from a Picasa album

find ./ -name '*.JPG' -type f -execdir rename -f 'y/A-Z/a-z/' {} \+
#Change files case, without modify directories, recursively

find / -name "*.jpg" -print -exec rdjpgcom '{}' ';'
#Find commets in jpg files.

for i in {1..100}; do convert -background lightblue -fill blue -size 100x100 -pointsize 24 -gravity center label:$i $i.jpg; done
#Create test images

convert *.jpg File_Output.pdf
#convert several jpg into one pdf file ImageMagick

for img in *.png; do convert "$img" "$img.jpg" ; done
#convert png into jpg using imagemagick

rename 's/\.jpeg/\.jpg/' *.jpeg; rename 's/\.JPG/\.jpg/' *.JPG
#Rename all .jpeg and .JPG files to .jpg

for((i=0;i<10;i++)) do tmp=`wget -O- -U "" "http://images.google.com/images?imgsz=xxlarge&hl=es&q=wallpaper&sa=N&start=$(($RANDOM%700+100))&ndsp=10" --quiet|grep -oe 'http://[^"]*\.jpg'|head -1`;[[ $tmp != "" ]] && wget $tmp || echo "Error $[$i+1]";done
#Download 10 random wallpapers from images.google.com

find . -iname '*.jpg' -type f -print0 |perl -0 -ne '$a+=-s $_;END{print "$a\n"}'
#Summarize size of all files of given type in all subdirectories (in bytes)

find . | perl -wne 'chomp; print qq|<img src="$_" title="$_" /><br />| if /\.(jpg|gif|png)$/;'> gallery.html
#Quick HTML image gallery from folder contents with Perl

convert in.pdf out.jpg
#Extracts PDF pages as images ImageMagick

for i in *.png; do convert "$i" "${i%.png}.jpg" && rm "$i" && echo "$i is converted."; done
#Batch convert PNG to JPEG

sqlite3 img.db "create table imgs (id INTEGER PRIMARY KEY, img BLOB); insert into imgs (img) values (\"$(base64 -w0 /tmp/Q.jpg)\"); select img from imgs where id=1;" | base64 -d -w0 > /tmp/W.jpg
#Create sqlite db and store image

cp `ls -x1tr *.jpg | tail -n 1` newest.jpg
#get newest jpg picture in a folder

sips -s format jpeg Bild.pdf --out Bild.jpg
#convert a pdf to jpeg

mogrify -resize 1024 *.jpg
#Resize all JPEGs in a directory

for File in *.jpg; do mogrify -resize 1024 -quality 96 $File; done
#Change size of lots of image files.

convert -resize 50%x50% image{,_resize}.jpg
#resize(1/2) the image using imagemagick

read -p "Please enter the 4chan url: "|egrep '//i.4cdn.org/[a-z0-9]+/src/([0-9]*).(jpg|png|gif)' - -o|nl -s https:|cut -c7-|uniq|wget -nc -i - --random-wait
#Download all images on a 4chan thread

find . \( -not -path "./boost*" \) -type f \( -name "*.jpg" -or -name "*.png" -or -name "*.jpeg" \) 2>/dev/null
#Find pictures excepting a path

convert yourdoublewideimage.jpg -crop 50%x100% +repage output.jpg
#Split an image in half for use on dual screens (mostly for use under KDE which treats each screen separately) ImageMagick

convert multi_layer.tif -compress jpg multi_page.pdf
#Convert multi layered TIFF file to multi page PDF document ImageMagick

for fil in *.JPG; do datepath="$(identify -verbose $fil | grep DateTimeOri | awk '{print $2"_"$3 }' | sed s%:%_%g)"; mv -v $fil $datepath.jpg; done
#batch JPEG rename to date using ImageMagick

for i in *.CR2; do dcraw -c -a -h $i | ppmtojpeg > `basename $i CR2`JPG; echo $i done; done
#convert Canon CR2 raw pictures to JPG

find . -name '*.jpg' -o -name '*.JPG' -print0 | xargs -0 mogrify -resize 1024">" -quality 40
#Resize images with mogrify with lots of options

mencoder mf://*.jpg -mf fps=50:type=jpg -ovc raw -oac copy -o out50fps.avi
#Compile all jpegs into 1 video by alphabetical order @ 50 fps

awk '/Dec\/2012/ {print $1,$8}' logfile | grep -ivE '(.gif|.jpg|.png|favicon|.css|.js|robots.txt|wp-l|wp-term)' | sort | uniq -c | sort -rn | head -n 20
#find top 20 results in apache statistics for a specific month

i=1; for f (*.jpg) zmv $f '${(l:3::0:)$((++i))}'$f
#Batch rename and number files

file -i `find . -name '*.jpg' -print` | grep "application/msword"
#Find .jpg file that is actually thumbs.db

find . -name '*.jpg' | awk 'BEGIN{ a=0 }{ printf "mv %s name%01d.jpg\n", $0, a++ }' | bash
#Batch rename and number files

for i in $(seq -w 0 100) ; do mv prefix$(( 10#$i )).jpg prefix${i}.jpg ; done
#Numeric zero padding file rename

find . -iname '*jpg' -print0 | xargs -0 exiftool -warning; find . -iname '*jpg' -print0 | xargs -0 jpeginfo -c
#Find corrupted jpeg image files

for line in `wget --referer='http://500px.com/' --quiet -O- http://500px.com/popular | grep "from=popular" | sed -n 's/.*<img src="\([^"]*\)".*/\1/p' | sed s/"3.jpg"/"4.jpg"/ | sed s/"?t".*$//`; do wget -O $RANDOM.jpg --quiet "$line"; done
#Download the last most popular 20 pictures from 500px

for file in *.jpg; do identify -format '%f %b %Q %w %h' $file; done
#List image attributes from a folder of JPEG images

pdf2jpg(){ convert -density 400 -bordercolor white -border 0 -resize 992x1403 -quality 85 $1 ${1/%pdf/jpg} ; }
#converts an A4 PDF file to accurate jpgs

identify path/to/image.jpg | awk '{print $3;}'
#Get dimensions of an image.

convert -size 100x100 xc:grey nopic100_100.jpg
#Create a new image with specified size and bg color  ImageMagick

for i in *.jpg; do dst=$(exif -t 0x9003 -m $i ) && dst_esc=$(echo $dst | sed 's/ /-/g' ) && echo mv $i $dst_esc.jpg ; done
#rename files according to date created

curl -s http://people.mozilla.com/~faaborg/files/shiretoko/firefoxIcon/firefox-64.png | convert - jpg:- | jp2a --color --html -> firefox.html
#firefox ascii logo ImageMagick

wget -O - http://www.reddit.com/r/wallpapers.rss | grep -Eo 'http://i.imgur.com[^&]+jpg' | head -1 | xargs wget -O background.jpg
#set desktop background to highest-rated image from Reddit /r/wallpapers

wget -nd -r -l 2 -A jpg,jpeg,png,gif http://website-url.com
#Download all images from a website in a single folder

youtube-dl -o bun.flv http://www.youtube.com/watch?v=SfPLcQhXpCc; mplayer bun.flv -ss 03:16 -endpos 5 -vo jpeg:outdir=bun:quality=100:smooth=30:progressive -vf scale=320:240 -nosound; convert -delay 4 -loop 0 bun/*.jpg bun.gif
#Create an animated gif from a Youtube video

curl -O http://www.site.com/img/image[001-175].jpg
#batch download jpgs which are in sequence

convert /home/user/file.jpg -resize 800x533 -strip -quality 80 -interlace line /home/user/web_file.jpg
#Convert high resolution JPEG for web publication ImageMagick

find . -type f -name '*.jpg' -exec convert -quality 75 {} {} \;
#Converts all jpg files to 75 quality.

curl -sm1 http://www.website.com/ | grep -o 'http://[^"]*jpg' | sort -u | wget -qT1 -i-
#download all jpg in webpage

mogrify -resize 600x800! *.jpg
#Batch resize image to exact given resolution ignoring aspect ratio

rename.ul "" 00 ?.jpg; rename "" 0 ??.jpg;
#Adding leading zeros to a filename (1.jpg -> 001.jpg)

for i in `seq -w 1 50`; do wget --continue \ http://commandline.org.uk/images/posts/animal/$i.jpg; done
#Download a set of files that are numbered

jpegtran -optimize -outfile temp.jpg <JPEG> && mv temp.jpg "$_"
#Losslessly optimize JPEG files for file size

curl -s --compressed http://funnyjunk.com | awk -F'"' '/ '"'"'mainpagetop24h'"'"'/ { print "http://funnyjunk.com"$4 }' | xargs curl -s | grep -o 'ht.*m/pictures/.*\.jpg\|ht.*m/gifs/.*\.gif' | grep "_......_" | uniq | xargs wget
#Download 40 top funnyjunk Images to the current directory

find <folder> -type f -name '*.jpg' -exec bash -c 'ext="${0##*.}";path="$(dirname "$0")";name="$(basename "$0"|sed "s/.jpg//")";folder="$(dirname "$0"|tr / \\n |tail -1)";new="${path}/${name}_${folder}.${ext}"; mv "$0" "${new}"' {} \;
#find pictures and renames them appending the containing folder name

ls *.JPG | cut -d . -f 1 | xargs -L1 -i convert -resize 684 {}.JPG {}.jpg
#resize all JPG images in folder and create new images (w/o overwriting)

wget -q $(lynx --dump 'http://geekandpoke.typepad.com/' | grep '\/.a\/' | grep '\-pi' | head -n 1 | awk '{print $2}') -O geekandpoke.jpg
#Get the latest Geek and Poke comic

find /home/bubo/ -type f \( -iname \*.jpg -print0 , -iname \*.png -print0 , -iname \*gif -print0 \) | du -cm --files0-from - | tail -1
#show how much diskspace all images in a given directory need

for URL in `wget -O - http://api.flickr.com/services/feeds/photos_public.gne?tags=bitch,bw 2>/dev/null | grep -E -o "http[^ ]+?jpg" | grep -v "_m" | uniq | grep -v 'buddy' `; do FILE=`echo $URL | grep -E -o "[0-9a-z_]+\.jpg"`; curl $URL > $FILE; done;
#Grap all images with the tags 'bitch' and 'bw' from a flickr photofeed

mencoder mf://*.jpg -mf w=800:h=600:fps=25:type=jpeg -ovc lavc -lavcopts vcodec=mpeg4 -oac copy -o output.avi
#Create a mpeg4 video from a jpeg picture sequence (e.g. for pencil animation) , from the current directory with mencoder

for i in ~/Desktop/Personal/Wallpapers/*.jpg ; { size=$((`identify -format "%wx%h" $i | sed 's/x/*/'`)) ; if [[ $size -lt 800001 ]] then ; rm -f "$i" ; fi; }
#A quick shell command to weed out the small wallpapers

for i in *jpg; do jpeginfo -c $i | grep -E "WARNING|ERROR" | cut -d " " -f 1 | xargs -I '{}' find /mnt/sourcerep -name {} -type f -print0 | xargs -0 -I '{}' cp -f {} ./ ; done
#sync a directory of corrupted jpeg with a source directory

for img in $( ls *.CR2 ); do convert $img $img.jpg; done
#Convert Raw pictures to jpg

convert panorama_rainbow_2005.jpg -resize 40% panorama_rainbow_compress.jpg
#Command line invocation of ImageMagick to resize a file

find ~/random_jpegs/folder -name "*.jpg" -exec rdjpgcom {} \;
#displays comments from random jpeg files.