/////////////////////////////////////////////////////////////////////////////
//
// Linux commands collection part1 ( www.commandlinefu.com )
//
// ---------------------------------------------------
// http://www.commandlinefu.com/commands/browse
//
/////////////////////////////////////////////////////////////////////////////

*
*
*
*
*
*

----------------------------------------

ffmpeg -f x11grab -r 25 -s 800x600 -i :0.0 /tmp/outputFile.mpg
#Record a screencast and convert it to an mpeg

ffmpeg -vcodec copy -acodec copy -i orginalfile -ss 00:01:30 -t 0:0:20 newfile
#Cut out a piece of film from a file. Choose an arbitrary length and starting time.

ffmpeg -i video.flv -vn -ar 44100 -ac 2 -ab 192k -f mp3 audio.mp3
#Extract audio from Flash video (*.flv) as mp3 file

wget -q -O - `youtube-dl -b -g $url`| ffmpeg -i - -f mp3 -vn -acodec libmp3lame -| mpg123 -
#Play music from youtube without download

ffmpeg -i video.avi -f mp3 audio.mp3
#Extract audio from a video

for f in *.flv; do ffmpeg -y -i "$f" -f image2 -ss 10 -vframes 1 -an "${f%.flv}.jpg"; done
#for all flv files in a dir, grab the first frame and make a jpg.

ffmpeg -i filename.flv
#Get video information with ffmpeg

read && ffmpeg -y -r 1 -t 3 -f video4linux2 -vframes 1 -s sxga -i /dev/video0 ~/webcam-$(date +%m_%d_%Y_%H_%M).jpeg
#Press enter and take a WebCam picture.

find -name '*wma' -exec ffmpeg -i {} -acodec vorbis -ab 128k {}.ogg \;
#Convert .wma files to .ogg with ffmpeg

mplayer -framedrop -vfm ffmpeg -lavdopts lowres=1:fast:skiploopfilter=all
#play high-res video files on a slow processor

ffmpeg -i <filename>.flv -vn <filename>.mp3
#Dumping Audio stream from flv (using ffmpeg)

ffmpeg -y -f alsa -ac 2 -i pulse -f x11grab -r 30 -s `xdpyinfo | grep 'dimensions:'|awk '{print $2}'` -i :0.0 -acodec pcm_s16le output.wav -an -vcodec libx264 -vpre lossless_ultrafast -threads 0 output.mp4
#Capture video of a linux desktop

adb pull /dev/graphics/fb0 /dev/stdout | ffmpeg -vframes 1 -vcodec rawvideo -f rawvideo -pix_fmt rgb32 -s 480x800 -i pipe:0 -f image2 -vcodec png screenshot.png
#Android PNG screenshot

ffmpeg -f alsa -ac 2 -i pulse -f x11grab -r 30 -s 1024x768 -i :0.0 -acodec pcm_s16le -vcodec libx264 -vpre lossless_ultrafast -threads 0 ./Desktop/mydesktop.mkv
#Recording the desktop and an application audio source for webcast

ffmpeg -i inputfile.mp4 outputfile.flv
#Quick and dirty convert to flash

ffmpeg -ss 00:00:30 -t 00:02:58 -i input.mp3 -acodec copy ouput.mp3
#cut audio file

ffmpeg -i file.flv -r 15 -b 128k -s qcif -acodec amr_nb -ar 8000 -ac 1 -ab 13 -f 3gp -y out.3gp
#Convert .flv to .3gp

cat frame/*.mpeg | ffmpeg -i $ID.mp3 -i - -f dvd -y track/$ID.mpg 2>/dev/null
#concat multiple videos into one (and add an audio track)

thumbnail() { ffmpeg -itsoffset -20 -i $i -vcodec mjpeg -vframes 1 -an -f rawvideo -s 640x272 ${i%.*}.jpg }
#Create a thumbnail from a video file

ffmpeg -f alsa -r 16000 -i hw:2,0 -f video4linux2 -s 800x600 -i /dev/video0 -r 30 -f avi -vcodec mpeg4 -vtag xvid -sameq -acodec libmp3lame -ab 96k output.avi
#Record audio and video from webcam using ffmpeg

ffmpeg -f x11grab -s `xdpyinfo | grep 'dimensions:'|awk '{print $2}'` -r 25 -i :0.0 -sameq /tmp/out.mpg > /root/howto/capture_screen_video_ffmpeg
#Capture video of a linux desktop

cat VIDEO_TS/VTS_01_[1234].VOB | nice ffmpeg -i - -s 512x384 -vcodec libtheora -acodec libvorbis ~/Videos/dvd_rip.ogg
#DVD ripping with ffmpeg

mkdir rotated; for v in *.3gp; do ffmpeg -i $v -vf transpose=2 -vcodec ffv1 rotated/${v/3gp/avi} ; done
#Losslessly rotate videos from your phone by 90 degrees.

ffmpeg -i source_audio.mp3 -itsoffset 00:00:10.2 -i source_video.m2v target_video.flv
#removing syncronization problems between audio and video

ffmpeg -i source_movie.flv -vcodec mpeg2video target_video.m2v -acodec copy target_audio.mp3
#extracting audio and video from a movie

ffmpeg -loop_input -f image2 -r 30000/1001 -t $seconds -i frame/$num.ppm -y frame/%02d.mpeg 2>/dev/null
#convert (almost) any image into a video

ffmpeg -f alsa -itsoffset 00:00:02.000 -ac 2 -i hw:0,0 -f x11grab -s $(xwininfo -root | grep 'geometry' | awk '{print $2;}') -r 10 -i :0.0 -sameq -f mp4 -s wvga -y intro.mp4
#Capture screen and mic input using FFmpeg and ALSA

ffmpeg -i input.m4a -acodec libmp3lame -ab 128k output.mp3
#m4a to mp3 conversion with ffmpeg and lame

ffmpeg -loop 1 -i image.png -i sound.mp3 -shortest video.mp4
#Creating A Single Image Video With Audio via ffmpeg

dvgrab --format raw - | tee dvstream.dv | ffmpeg2theora -A 45 -V 400 -c 1 -f dv -x 360 -y 288 -o /dev/stdout - | tee savelivestream.ogv | oggfwd -p -d "Stream description" -n "Streamname" my.icecastserver.com 80 icecastpassword /stream.ogv
#Streaming HTML5 video to icecast server using dvgrab, ffmpeg2theora and oggfwd

ffmpeg -an -f video4linux -s 320x240 -b 800k -r 15 -i /dev/v4l/video0 -vcodec mpeg4 myvideo.avi
#Record a webcam output into a video file.


alias burnaudiocd='mkdir ./temp && for i in *.[Mm][Pp]3;do mpg123 -w "./temp/${i%%.*}.wav" "$i";done;cdrecord -pad ./temp/* && rm -r ./temp'
#Burn a directory of mp3s to an audio cd.

ffmpeg -ss 0:58:15 -i DavidLettermanBlackCrowes.mpg -acodec copy DavidLettermanBlackCrowes.ac3
#Extract audio from Mythtv recording to Rockbox iPod using ffmpeg

ffmpeg -f alsa -ac 2 -i hw:1,0 -acodec libmp3lame -ab 96k output.mp3
#Record MP3 audio via ALSA using ffmpeg

url="$my_url";file=$(youtube-dl -s -e $url);wget -q -O - `youtube-dl -b -g $url`| ffmpeg -i - -f mp3 -vn -acodec libmp3lame - > "$file.mp3"
#Play music from youtube without download

gorecord() { if [ $# != 1 ]; then echo 'gorecord video.mp4' return fi ffmpeg -f x11grab -s <resolution> -r 25 -i :0.0 -sameq -vcodec mpeg4 "$1" }
#High resolution video screen recording

ffmpeg -i input.avi -s qcif -vcodec h263 -r 20 -b 180k -acodec libfaac -ab 64k -ac 2 -ar 22050 output.3gp
#Converting video file (.flv, .avi etc.) to .3gp

ffmpeg -i input_file.avi output_file.webm
#Convert (almost) any video file into webm format for online html5 streaming

ffmpeg -t 300 -r '0.5' -i head-%03d.png -i ../TvQuran.com__144.mp3 -acodec copy muxed.flv
#Add an audio soundtrack to a series of images to create an flv

ffmpeg -i file.ext -acodec copy -vn out.ext
#Dump audio from video without re-encoding.

ffmpeg -i movie.avi -y -f vcd -vcodec mpeg1video -map 0.0:0.0 -b 1150 -s 352x240 -r 29.97 -g 12 -qmin 3 -qmax 13 -acodec mp2 -ab 224 -ar 44100 -ac 2 -map 0.1:0.1 movie.mpg
#convert plain .avi movies to .mpeg

for f in *.m4a; do ffmpeg -i "$f" "${f%.m4a}.flv"; done
#convert all files in a dir of a certain type to flv

ffmpeg -i input.flv -f mp3 -vn -acodec copy ouput.mp3
#extract audio from flv to mp3

ffmpeg -i source.flv -vn acodec copy destination.mp3
#Copy the sound content of a video to an mp3 file

ffmpeg -i mymovie.mpg -ar 22050 -acodec libmp3lame -ab 32K -r 25 -s 320x240 -vcodec flv mytarget.flv
#Create a video that is supported by youtube

ffmpeg -i [source].avi -f mp4 -vcodec mpeg4 -b 250000 -s 480?320 -acodec aac -ar 24000 -ab 64 -ac 2 [destination].mp4
#Convert AVI to iPhone MP4

ffmpeg -i /var/lib/mythtv/pretty/Chuck20100208800PMChuckVersustheMask.mpg -s 800x480 -vcodec mpeg4 -acodec libfaac -ac 2 -ar 16000 -r 13 -ab 32000 -aspect 16:9 Chuck20100208800PMChuckVersustheMask.mp4
#ffmpeg command that transcodes a MythTV recording for Google Nexus One mobile phone

ffmpeg -i broken.flv -acodec copy -vcodec copy fixed.flv
#fix flash video (flv) file (ffmpeg)

ffmpeg -i 100_0029.MOV -ss 00:00:00 -t 00:04:00 100_0029_1.MOV
#split large video file

ffmpeg -f alsa -ac 2 -i hw:0,0 -f x11grab -r 30 -s $(xwininfo -root | grep 'geometry' | awk '{print $2;}') -i :0.0 -acodec pcm_s16le -vcodec libx264 -vpre lossless_ultrafast -threads 0 -y output.mkv
#Screencast with ffmpeg x11grab

ffmpeg -i video.mp4 -i audio.mp3 -vcodec copy -acodec copy -map 0.0:0 -map 1.0:1 mix.mp4
#mix video and audio

ffmpeg -ss 5 -i video.avi -vframes 1 -s 320x240 thumb.jpg
#Video thumbnail

ffmpeg -i concat:VTS_02_1.VOB\|VTS_02_2.VOB\|VTS_02_3.VOB\|VTS_02_4.VOB\|VTS_02_5.VOB -map 0:v:0 -map 0:a:0 -codec:a libvo_aacenc -ab 128 -codec:v libx264 -vpre libx264-ipod640 movie.mp4
#DVD ripping with ffmpeg

~/sbin/youtube-dl -t --extract-audio --audio-format=m4a http://www.youtube.com/watch?v=DxL8X9mT90k
#Download song from youtube for import into itunes (m4a format)

avconv -i infile.avi -an outfile.avi
#Remove audio stream from a media file

avconv -v warning -f alsa -i default -f x11grab -r 15 -s wxga -i :0.0 -vcodec libx264 -preset ultrafast -threads auto -y -metadata title="Title here" ~/Video/AVCONV_REG.mp4
#Screencast of your PC Display with mp4 output

gst-launch-0.10 autovideosrc ! video/x-raw-yuv,framerate=\(fraction\)30/1,width=640,height=480 ! ffmpegcolorspace ! autovideosink
#View webcam output using GStreamer pipeline

INPUT=<input_video> && ffmpeg -i "$INPUT" -vn -f wav - | oggenc -o ${INPUT%%.*}.ogg -
#Convert a videos audio track to ogg vorbis.

ffmpeg -i input.mov -b 4096k -vcodec msmpeg4v2 -acodec pcm_u8 output.avi
#Convert a MOV captured from a digital camera to a smaller AVI

ffmpeg -i Your_video_file -s 320x240 FILE.flv
#convert video format to youtube flv format

ffmpeg -r 24 -i %04d.png -i INPUTSOUND -r 24 -aspect 16:9 -s 1920x1080 -vcodec libx264 -vpre hq -acodec ac3 -b 40000k -shortest -threads 0 OUTFILE.mp4
#Encode png's into blu-ray format

mplayer dvd://1 -dumpstream -alang es -dumpfile "$dirDestino"/"$tituloDVD".mpg && ffmpeg -i "$dirDestino/$tituloDVD.mpg" -acodec libmp3lame -alang spa -vcodec libx264 -crf 26 -vpre hq -threads 0 "$dirDestino/$tituloDVD.mp4"
#DVD-Rip

ffmpeg -i movie.mkv -target vcd movie.avi
#Convert mkv to SVCD/DivX

gnome-terminal -e "bash -c \"ffmpeg -f x11grab -r 25 -s $(xwininfo -root |sed -n 's/ -geometry \([0-9x]*\).*/\1/p') -i :0.0 -vcodec huffyuv -sameq ~/Desktop/screencast.avi; exec bash\""
#A video capture command which can be assigned to a keyboard shortcut.

ffmpeg -i input.mp4 -vn -acodec copy output.m4a
#Extract audio from a video

ffmpeg -i inputfile.avi -croptop 88 -cropbottom 88 -cropleft 360 -cropright 360 outputfile.avi
#Cropping a video file in ffmpeg

ffmpeg -i video.avi -vcodec copy -acodec copy -ss 00:00:00 -t 00:00:04 trimmed_video.avi
#How to trim a video using ffmpeg

url="put_url_here";audio=$(youtube-dl -s -e $url);wget -q -O - `youtube-dl -g $url`| ffmpeg -i - -f mp3 -vn -acodec libmp3lame - > "$audio.mp3"
#Convert Youtube videos to MP3

echo "Click a window to start recording"; read x y W H <<< `xwininfo | grep -e Width -e Height -e Absolute | grep -oE "[[:digit:]]{1,}" | tr "\n" " "`; ffmpeg -f alsa -ac 1 -i pulse -f x11grab -s ${W}x${H} -r 25 -i :0.0+${x},${y} -sameq output.mkv
#Create a video screencast of any x11 window, with audio

ffmpeg -i input.ogv -vol $((256*4)) -vcodec copy output.ogv
#video volume boost

sox -d -p | ffmpeg -i pipe:0 -f flv -preset ultrafast -tune zerolatency rtmp://localhost/live/livestream
#Stream system sounds over rtmp

ffmpeg -f x11grab -s wxga -r 25 -i :0.0+1366,0 -qscale 0 /tmp/out.mpg
#Capture video of a linux desktop

ffmpeg -i input_file.mp4 -strict experimental output_file.webm
#Convert (almost) any video file into webm format for online html5 streaming

ffmpeg -i movie.avi -s 320x240 -b 1000k -vcodec wmv2 -ar 44100 -ab 56000 -ac 2 -y movie.wmv
#Convert AVI to WMV

ffmpeg -i "/path/to/file.mp4" "/path/to/file.avi"
#convert a .mp4 to a .avi

pidstat -C "ffmpeg" -u
#Command to display how much resource is taken by cpu and which core is taking

mencoder -of avi -ovc lavc movie.avi -o movie2.avi; ffmpeg -i movie2.avi -r 12 -b 100 movie.flv
#Convert a VMWare screencast into a flv file

ffmpeg -i input.flv -aq 2 output.mp3
#Dumping Audio stream from flv (using ffmpeg)

ffmpeg -i "inputFile.avi" -f psp -r 29.97 -b 512k -ar 24000 -ab 64k -s 368x208 M4V00002.MP4
#Convert movie to psp format

ffmpeg -i file.flv file.avi
#Convert .flv to .avi

ffmpeg -i initial.mkv -acodec libvorbis -ab 128k -ac 2 -vcodec libx264 -vpre max -crf 22 -threads 0 final.mkv
#Encode mkv file to ogg+h264+mkv

ffmpeg -i foo.mp3 -vol 20 -acodec libmp3lame bar.mp3
#Set volume to a mp3 file

ffmpeg -i in.mkv -acodec libfaac -ab 128k -ac 2 -vcodec libx264 -vpre max -crf 22 -threads 0 out.mp4
#Encode a hq video +10mb/min to an 1mb/min suitable for youtube

# YouTube Convert and Download All User's Videos to MP3s on the fly
yt-mp3chanrip() { for count in 1 51 101 151 201 251 301; do for i in $(curl -s http://gdata.youtube.com/feeds/api/users/"$1"/uploads\?start-index="$count"\&max-results=50 | grep -Eo "watch\?v=[^[:space:]\"\'\\]{11}" | uniq); do ffmpeg -i $(wget http://youtube.com/"$i" -qO- | sed -n "/fmt_url_map/{s/[\'\"\|]/\n/g;p}" | sed -n '/^fmt_url_map/,/videoplayback/p' | sed -e :a -e '$q;N;5,$D;ba' | tr -d '\n' | sed -e 's/\(.*\),\(.\)\{1,3\}/\1/') -vn -ab 128k "$(youtube-dl -e http://youtube.com/"$i").mp3"; done; done; unset count i; }
#create the function and run with
#yt-mp3chanrip YoutubeUsername

yt-pl2mp3() {umph -m 50 $1 | cclive -f mp4_720p; IFS=$(echo -en "\n\b"); for track in $(ls | grep mp4 | awk '{print $0}' | sed -e 's/\.mp4//'); do (ffmpeg -i $track.mp4 -vn -ar 44100 -ac 2 -ab 320 -f mp3 $track.mp3); done; rm -f *.mp4}
#Download YouTube music playlist and convert it to mp3 files

ffmpeg -f video4linux2 -s 320x240 -i /dev/video0 -f alsa -ac 1 -i default -f mp4 Filename.mp4
#Make webcam video

get_duration () { IFS=.: read -r _ h m s _ < <(ffmpeg -i "$1" 2>&1 | grep Duration);echo $(( h * 3600 + m * 60 + s )); }
#Get duration of an audio file in seconds.

ffmpeg -f alsa -i default -f x11grab -s sxga -r 10 -i :0.0 -f mp4 -s vga -sameq out.mp4
#capture screen and mic sxga ==> 1280x1024   vga ==> 800x600

for f in *.wma; do ffmpeg -i "$f" -ab 128k "${f%.wma}.mp3" -ab 128K; done
#Convert wma to mp3@128k

ffmpeg -i video.flv audio.ogg
#Convert flv/mp4 video to ogg/mp3

ssh user@host "ffmpeg -f x11grab -s 1920x1080 -i :0 -r 1 -t 1 -f mjpeg -" | display
#open a screenshot of a remote desktop via ssh

ssh user@host "ffmpeg -f x11grab -r 5 -s 1280x720 -i :0 -f avi -" | ffplay - &>/dev/null
#Live stream a remote desktop over ssh using only ffmpeg

a=$(xwininfo |gawk 'BEGIN {FS="[x+ \t]*"} /-geometry/ {print int(($3+1)/2)*2"x"int(($4+1)/2)*2"+"$5"+"$6}') ; echo ${a} ; ffmpeg -f x11grab -s ${a} -r 10 -i :0.0 -sameq -f mp4 -s wvga -y /tmp/out.mpg
#Capture screen and mic input using FFmpeg and ALSA

avconv -i input.avi -target pal-dvd dvd.mpg && echo PAL > ~/.config/video_format && dvdauthor -o dvd/ -t dvd.mpg && dvdauthor -o dvd/ -T && growisofs -Z /dev/dvd -dvd-video dvd/
#Burn a simple DVD-Video without menu using any given video file

avconv -v warning -f alsa -ac 2 -i default -f x11grab -r 15 -s wxga -i :0.0 -acodec libvorbis -ab 320k -vcodec libvpx -qmax 2 -qmin 1 -threads auto -y -metadata title="Title here" ~/Video/AVCONV_REG.webm
#Screencast of your PC Display with webm output

ffmpeg -i input.mkv -vcodec copy -acodec copy -absf aac_adtstoasc output.m4v
#Converter mkv (Blu-Ray_1280x540_AAC_5.1]_[10Bit]) para mp4 sem perder a qualidade

ffmpeg -i source.mpg -r 24 -f image2 still-%6d.png
#Convert video file to sequence of images

ffmpeg -i source.mpg -f s16le -acodec pcm_s16le audio.raw
#Extract raw audio from video

ffmpeg -i "concat:$(find . -name "*.mp3" | sort | tr '\n' '|')" -acodec copy ../$(basename $(pwd)).mp3 && mp3val -f ../$(basename $(pwd)).mp3
#Losslessly combine all MP3s in a directory (e.g. an audiobook)

IFS=$(echo -en "\n\b"); input="/my/input/dir/*.flac"; mkdir -p $(dirname $f)/mp3; for f in $input; do ffmpeg -i $f -ab 196k -ac 2 -ar 48000 $(dirname $f)/mp3/$(basename "${f:0:${#f}-4}mp3"); done
#convert flac files to mp3 files into subdir mp3

ffmpeg -f x11grab -s wxga -r 25 -i :0.0 -sameq /home/ken/Desktop/moviemade1.mpg
#Linux screenshot

for file in "$@"; do name=$(basename "$file" .webm) echo ffmpeg -i $file -vn -c:a copy $name.ogg ffmpeg -i "$file" -vn -c:a copy "$name.ogg" done
#strips ogg audio from webm video ( no reencoding )

ffmpeg -i "input.mts" -vcodec copy -acodec pcm_s16le "output.mov"
#Rewrap an AVCHD (MTS/M2TS) video as MOV

ffmpeg -re -i localFile.mp4 -c copy -f flv rtmp://server/live/streamName
#Stream a video file as live stream

ffmpeg -i $video -c:v prores -profile:v 2 -c:a copy ${video}.mov
#iMovie compatible ffmpeg transcoding

curl 'AudioStream' | ffmpeg -i - -acodec libvorbis file.ogg
#Conversion of media stream

ffmpeg -i input.ogv -qscale 0 output.wmv # convert .ogv to .wmv
#Convert a .ogv recording (eg from recordmydesktop in Gnome/Linux) into a .wmv (eg for playback in Windows)

for i in $(ls *.flv); do ffmpeg2theora -v 6 --optimize $i; done
#Convert all FLV's in a directory to Ogg Theora (video)

for file in $(find . -name *.mp4); do ogv=${file%%.mp4}.ogv; if test "$file" -nt "$ogv"; then echo $file' is newer then '$ogv; ffmpeg2theora $file; fi done
#Recursive find all mp4s in a folder and convert to ogv if the ogv does not exist or the mp4 is newer then the current ogv

gst-launch-0.10 v4l2src ! ffmpegcolorspace ! warptv ! ffmpegcolorspace ! autovideosink
#warped and shagadelic webcam view with gstreamer

for x in *.ogg; do ffmpeg -i "$x" "`basename "$x" .ogg`.mp3"; done
#Convert ogg to mp3

ffmpeg -i input.flv -vhook '/usr/lib/vhook/imlib2.so -c white -x 250 -y H+(-1.8*N+80) -t Hallo! -A max(0,255-exp(N/16))' -sameq -acodec copy output.flv
#ffmpeg vhook imlib2.so

ffmpeg -r 12 -i img%03d.jpg -sameq -s hd720 -vcodec libx264 -crf 25 OUTPUT.MP4
#Timelapse with ffmpeg (after symlinking pictures as per ffmpeg FAQ)

gst-launch avimux name=mux ! filesink location=out.avi \ alsasrc ! audioconvert ! queue ! mux. istximagesrc name=videosource use-damage=false ! video/x-raw-rgb,framerate=10/1 ! videorate ! ffmpegcolorspace ! video/x-raw-yuv,framerate=10/1 ! mux.
#Capture screen and default audio input device and generate an incompress AVI file

for x in *.ogg; do ffmpeg -i "$x" "`basename "$x" .ogg`.mp3"
#Convert a bunch of oggs into mp3s