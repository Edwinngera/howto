/////////////////////////////////////////////////////////////////////////////
//
// Linux commands collection part1 ( www.commandlinefu.com )
//
// ---------------------------------------------------
// http://www.commandlinefu.com/commands/browse
//
/////////////////////////////////////////////////////////////////////////////

*
*
*
*
*
*

----------------------------------------

ssh -N -L2001:localhost:80 somemachine
#start a tunnel from some machine's port 80 to your local post 2001

dd if=/dev/dsp | ssh -c arcfour -C username@host dd of=/dev/dsp
#output your microphone to a remote computer's speaker

sshfs name@server:/path/to/folder /path/to/mount/point
#Mount folder/filesystem through SSH

ssh user@host cat /path/to/remotefile | diff /path/to/localfile -
#Compare a remote file with a local file

ssh -t reachable_host ssh unreachable_host
#SSH connection through host in the middle

ssh-copy-id username@hostname
#Copy your SSH public key on a remote machine for passwordless login - the easy way

cat ~/.ssh/id_rsa.pub | ssh user@machine "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
Copy your ssh public key to a server from a machine that doesn't have ssh-copy-id

ssh-keygen -R <the_offending_host>
#Remove a line in a text file. Useful to fix

ssh -t remote_host screen -r
#Attach screen over ssh

ssh -MNf <user>@<host>
#Create a persistent connection to a machine

ssh -t hostA ssh hostB
#directly ssh to host B that is only accessible through host A

ssh root@remote.host "rpm -qa" | xargs yum -y install
#Duplicate installed packages from one machine to the other (RPM-based systems)

date --set="$(ssh user@server date)"
#Synchronize date and time with a server over ssh

sed -i 8d ~/.ssh/known_hosts
#Remove a line in a text file. Useful to fix "ssh host key change" warnings

ssh host -l user $(<cmd.txt)
#run complex remote shell cmds over ssh, without escaping quotes

echo ${SSH_CLIENT%% *}
#Get the IP of the host your coming from when logged in remotely

ssh -t user@some.domain.com /usr/bin/screen -xRR
#How to establish a remote Gnu screen session that you can re-connect to

mysqldump --add-drop-table --extended-insert --force --log-error=error.log -uUSER -pPASS OLD_DB_NAME | ssh -C user@newhost "mysql -uUSER -pPASS NEW_DB_NAME"
#Copy a MySQL Database to a new Server via SSH with one command

ssh root@server.com 'tshark -f "port !22" -w -' | wireshark -k -i -
#analyze traffic remotely over ssh w/ wireshark

tar -cj /backup | cstream -t 777k | ssh host 'tar -xj -C /backup'
#throttle bandwidth with cstream

yes | pv | ssh $host "cat > /dev/null"
#live ssh network throughput test

rsync --partial --progress --rsh=ssh $file_source $user@$host:$destination_file
#Resume scp of a big file

ssh remotehost 'dpkg --get-selections' | dpkg --set-selections && dselect install
#Tell local Debian machine to install packages used by remote Debian machine

ssh -f -L 5900:localhost:5900 your.ssh.server "x11vnc -safer -localhost -nopw -once -display :0"; vinagre localhost:5900
#Single use vnc-over-ssh connection

arecord -f dat | ssh -C user@host aplay -f dat
#output your microphone to a remote computer's speaker

autossh -M50000 -t server.example.com 'screen -raAd mysession'
#Have an ssh session open forever

ssh -4 -C -c blowfish-cbc
#Harder, Faster, Stronger SSH clients

ssh-keygen; ssh-copy-id user@host; ssh user@host
#Transfer SSH public key to another machine in one step

ssh user@host cat /path/to/some/file | xclip
#Copy stdin to your X11 buffer

ssh user@host 'mysqldump dbname | gzip' > /path/to/backups/db-backup-`date +%Y-%m-%d`.sql.gz
#Backup a remote database to your local filesystem

ssh user@host "tar -zcf - /path/to/dir" > dir.tar.gz
#Create a local compressed tarball from remote host directory

rsync --progress --partial --rsh="ssh -p 8322" --bwlimit=100 --ipv4 user@domain.com:~/file.tgz .
#rsync instead of scp

ssh-keygen -R <thehost>
#Remove a line from a file using sed (useful for updating known SSH server keys when they change)

echo "uptime" | pee "ssh host1" "ssh host2" "ssh host3"
#run command on a group of nodes in parallel

ssh root@host1 "cd /somedir/tocopy/ && tar -cf - ." | ssh root@host2 "cd /samedir/tocopyto/ && tar -xf -"
#copy from host1 to host2, through your host

diff <(ssh alice cat /etc/apt/sources.list) <(ssh bob cat /etc/apt/sources.list)
#Diff files on two remote hosts.

ssh -fX <user>@<host> <program>
#Run any GUI program remotely

echo "uptime" | tee >(ssh host1) >(ssh host2) >(ssh host3)
#run command on a group of nodes in parallel

tar jcpf - [sourceDirs] |ssh user@host "cat > /path/to/backup/backupfile.tar.bz2"
#Remote backups with tar over ssh

diff <(ssh server01 'cd config; find . -type f -exec md5sum {} \;| sort -k 2') <(ssh server02 'cd config;find . -type f -exec md5sum {} \;| sort -k 2')
#Identify differences between directories (possibly on different servers)

sed -i 8d ~/.ssh/known_hosts
#Delete the specified line

cat .ssh/id_rsa.pub | ssh hostname 'cat >> .ssh/authorized_keys'
#Add your public SSH key to a server in one command

while [ ! -f /tmp/stop ]; do ssh -o ExitOnForwardFailure=yes -R 2222:localhost:22 target "while nc -zv localhost 2222; do sleep 5; done"; sleep 5;done
#ssh tunnel with auto reconnect ability

tar czv file1 file2 folder1 | ssh user@server tar zxv -C /destination
#scping files with streamlines compression (tar gzip)

ssh -t remotebox "tail -f /var/log/remote.log"
#tail a log over ssh

ssh -f -L3389:<RDP_HOST>:3389 <SSH_PROXY> "sleep 10" && rdesktop -T'<WINDOW_TITLE>' -uAdministrator -g800x600 -a8 -rsound:off -rclipboard:PRIMARYCLIPBOARD -5 localhost
#RDP through SSH tunnel

apt-get install `ssh root@host_you_want_to_clone "dpkg -l | grep ii" | awk '{print $2}'`
#"Clone" a list of installed packages from one Debian/Ubuntu Server to another

dd if=/dev/sda | ssh user@server 'dd of=sda.img'
#Backup a local drive into a file on the remote host via ssh

ssh -f -N -L 5432:talk.google.com:5222 user@home.network.com
#Connect to google talk through ssh by setting your IM client to use the localhost 5432 port

ssh user@remote-host "DISPLAY=:0.0 import -window root -format png -"|display -format png -
#Remote screenshot

ssh -NR 0.0.0.0:2222:127.0.0.1:22 user@jump.host.com
#ssh to machine behind shared NAT

pv /dev/zero|ssh $host 'cat > /dev/null'
#live ssh network throughput test

tar -cf - /home/user/test | gzip -c | ssh user@sshServer 'cd /tmp; tar xfz -'
#move a lot of files over ssh

awk '/sshd/ && /Failed/ {gsub(/invalid user/,""); printf "%-12s %-16s %s-%s-%s\n", $9, $11, $1, $2, $3}' /var/log/auth.log
#Displays the attempted user name, ip address, and time of SSH failed logins on Debian machines

ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no username@host
#Temporarily ignore mismatched SSH host key

xloadimage <(ssh USER@HOSTNAME DISPLAY=:0.0 import -window root png:-)
#open a screenshot of a remote desktop via ssh

multitail -l 'ssh machine1 "tail -f /var/log/apache2/error.log"' -l 'ssh machine2 "tail -f /var/log/apache2/error.log"'
#Watch several log files of different machines in a single multitail window on your own machine

tar -czvf - /src/dir | ssh remotehost "(cd /dst/dir ; tar -xzvf -)"
#Secure copy from one server to another without rsync and preserve users, etc

ssh-keygen -l -f ~/.ssh/known_hosts
#View ~/.ssh/known_hosts key information

ssh root@HOST tcpdump -U -s0 -w - 'not port 22' | wireshark -k -i -
#analyze traffic remotely over ssh w/ wireshark

ssh -C -Y -l$USER xserver.mynet.xx 'Xnest -geometry 1900x1150 -query localhost'
#runs a X session within your X session

AUTOSSH_POLL=1 autossh -M 21010 hostname -t 'screen -Dr'
#autossh + ssh + screen = super rad perma-sessions

complete -W "$(echo $(grep '^ssh ' .bash_history | sort -u | sed 's/^ssh //'))" ssh
#ssh autocomplete

ssh -L :: -L :: @
#Multiple SSH Tunnels

autossh -f -M 20000 -D 8000 somehost -N
#Create an SSH SOCKS proxy server on localhost:8000 that will re-start itself if something breaks the connection temporarily

ssh vm-user@`VBoxManage guestproperty get "vm-name" "/VirtualBox/GuestInfo/Net/0/V4/IP" | awk '{ print $2 }'`
#Connect via SSH to VirtualBox guest VM without knowing IP address

ssh -R 5497:127.0.0.1:22 -p 62220 user@public.ip
#back ssh from firewalled hosts

mysqldump -q --skip-opt --force --log-error=dbname_error.log -uroot -pmysqlpassword dbname | ssh -C user@sshserver 'cd /path/to/backup/dir; cat > dbname.sql'
#backup with mysqldump a really big mysql database to a remote machine over ssh

ssh <host> 'tar -cz /<folder>/<subfolder>' | tar -xvz
#Copy a folder tree through ssh using compression (no temporary files)

while read server; do ssh -n user@$server "command"; done < servers.txt
#How to run a command on a list of remote servers read from a file

mecp () { scp "$@" ${SSH_CLIENT%% *}:Desktop/; }
#Easily scp a file back to the host you're connecting from

xterm -display :12.0 -e ssh -X user@server &
#run remote linux desktop

ssh -o UserKnownHostsFile=/dev/null root@192.168.1.1
#Temporarily ignore known SSH hosts

ssh user@host "cat /path/to/backup/backupfile.tar.bz2" |tar jpxf -
#Recover remote tar backup with ssh

ssh user@host "mysqldump -h localhost -u mysqluser -pP@$$W3rD databasename | gzip -cf" | gunzip -c > database.sql
#Get a MySQL DB dump from a remote machine

sudo arp -s 192.168.1.200 00:35:cf:56:b2:2g temp && ssh root@192.168.1.200
#connect via ssh using mac address

ssh root@`for ((i=100; i<=110; i++));do arp -a 192.168.1.$i; done | grep 00:35:cf:56:b2:2g | awk '{print $2}' | sed -e 's/(//' -e 's/)//'`
#connect via ssh using mac address

cat /var/log/secure | grep sshd | grep Failed | sed 's/invalid//' | sed 's/user//' | awk '{print $11}' | sort | uniq -c | sort -n
#Find brute force attempts on SSHd

sox Klaxon.mp3 -t wav - |ssh thelab@company.com paplay
#Stream audio over ssh

ssh -R 2001:localhost:22 [username]@[remote server ip]
#Create an SSH connection (reverse tunnel) through your firewall.

ssh -f user@remote.ip DISPLAY=:0.0 smplayer movie.avi
#Start an X app remotely

ssh -t user@host screen -x <screen name>
#ssh and attach to a screen in one line.

tar cpfP - $(find <somedir> -type f -name *.png) | ssh user@host | tar xpfP -
#Copy specific files to another machine, keeping the file hierarchy

ssh -CNL 3306:localhost:3306 user@site.com
#Create an SSH tunnel for accessing your remote MySQL database with a local port

ssh USER@HOST cat REMOTE_FILE.mp4 | tee LOCAL_FILE.mp4 | mplayer -
#Securely stream (and save) a file from a remote server

ssh user@host "tar -cf - /path/to/dir" | gzip > dir.tar.gz
#Create a local compressed tarball from remote host directory

nmap -oG - -T4 -p22 -v 192.168.0.254 | grep ssh
#Using NMAP to check if a port is open or close

ssh [user]@[address] "mpg321 -" < [file].mp3
#Stream audio over ssh

echo 'ServerAliveInterval 60' >> /etc/ssh/ssh_config
#Avoids ssh timeouts by sending a keep alive message to the server every 60 seconds

ssh HOST cat < LOCALFILE ">" REMOTEFILE
#Copy a file over SSH without SCP

[ $1 == "client" ] && hostname || cat $0 | ssh $1 /bin/sh -s client
#Script executes itself on another host with one ssh command

ssh -f -L3307:127.0.0.1:3306 -N -t -x user@host sleep 600 ; mk-table-sync --execute --verbose u=root,p=xxx,h=127.0.0.1,P=3307 u=root,p=xxx,h=localhost
#Sync MySQL Servers via secure SSH-tunnel

ssh user@server | tee logfilename
#Record output of any command using 'tee' at backend; mainly can be used to capture the output of ssh from client side while connecting to a server.

ssh user@host "cd targetdir; tar cfp - *" | dd of=file.tar
#Transfer large files/directories with no overhead over the network

ssh -A user@somehost
#the -A argument forwards your ssh private keys to the host you're going to

diff <(ssh nx915000 "rpm -qa") <(ssh nx915001 "rpm -qa")
#find the difference between two nodes

ssh-keygen -R \[localhost\]:8022
#Remove invalid host keys from ~/.ssh/known_hosts

s() { screen -d -RR -m -S "$1" -t "$USER"@"$1" ssh "$1"; }
#Easy Persistent SSH Connections Using Screen

ssh-copy-id -i .ssh/id_rsa.pub user@server
#copy public key

ssh -f -N -R 8888:localhost:22 user@somedomain.org
#Reverse SSH

sed -i '${LINE}d' ~/.ssh/known_host
#Remove a line from a file using sed (useful for updating known SSH server keys when they change)

ssh -C USER@HOST tar -c --exclude /proc --exclude /sys / | tar -x
#Backup entire system through SSH

cat /dev/zero | pv | ssh 192.168.1.2 "cat > /dev/null"
#Checks throughput between two nodes

dd if=mfsbsd.iso | ssh distant.server dd of=/dev/sda
#Install a basic FreeBSD system

dd if=/dev/zero bs=4096 count=1048576 | ssh user@host.tld 'cat > /dev/null'
#Test network speed without wasting disk

ssh -fY user@REMOTESERVER firefox -no-remote
#Launch firefox on a remote linux server

sudo date -s "$(ssh user@server.com "date -u")"
#Sync the date of one server to that of another.

ssh-keygen -R `host hostname | cut -d " " -f 4`
#Remove invalid key from the known_hosts file for the IP address of a host

ssh user@machine_A dd if=/dev/dvd0 > dvddump.iso
#Dump dvd from a different machine onto this one.

ssh root@pyramid \ "tcpdump -nn -i eth1 -w -" | snort -c /etc/snort/snort.conf -r -
#Remotely sniff traffic and pass to snort

rsync -avz -e 'ssh -A sshproxy ssh' srcdir remhost:dest/path/
#Remote copy directories and files through an SSH tunnel host

tar -czf - * | ssh example.com "cat > files.tar.gz"
#Pack up some files into a tarball on a remote server without writing to the local filesystem

cat .ssh/id_dsa.pub | ssh elsewhere "[ -d .ssh ] || mkdir .ssh ; cat >> .ssh/authorized_keys"
#Enter your ssh password one last time

ssh -D 8888 user@site.com
#Forward port 8888 to remote machine for SOCKS Proxy

cat ~/.ssh/*.pub | ssh user@remote-system 'umask 077; cat >>.ssh/authorized_keys'
#Copy your SSH public key on a remote machine for passwordless login.

dump 0f - / | bzip -c9 | ssh user@host "cat > /home/user/root.dump.bz2"
#Dump root ext3 fs over ssh

cat ~/.ssh/id_rsa.pub | ssh <REMOTE> "(cat > tmp.pubkey ; mkdir -p .ssh ; touch .ssh/authorized_keys ; sed -i.bak -e '/$(awk '{print $NF}' ~/.ssh/id_rsa.pub)/d' .ssh/authorized_keys; cat tmp.pubkey >> .ssh/authorized_keys; rm tmp.pubkey)"
#Copy your ssh public key to a server from a machine that doesn't have ssh-copy-id

ssh USER@REMOTESYSTEM arecord - | aplay -
#Record off the microphone on a remote computer and listen to it live through your speakers locally.

ssh -T user@server < script.sh
#Run local bash script on remote server

ssh -fND localhost:PORT USER@SSH_ENABLED_SERVER
#Create a persistent remote Proxy server through an SSH channel

ssh user@remote 'cat >> ~/.ssh/authorized_keys2' < ~/.ssh/id_rsa.pub
#Install your ssh key file on a remote system

ssh -t server 'cd /etc && $SHELL'
#ssh: change directory while connecting

eval `ssh-agent`; screen
#Let's make screen and ssh-agent friends

autossh -f -i /path/to/key -ND local-IP:PORT User@Server
#Setup a persistant SSH tunnel w/ pre-shared key authentication

ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key.pub && ssh-keygen -l -f /etc/ssh/ssh_host_dsa_key.pub
#Get ssh server fingerprints

cat nicescript |ssh middlehost "cat | ssh -a root@securehost 'cat > nicescript'"
#scp a good script from host A which has no public access to host C, but with a hop by host B

ssh-copy-id user@host
#Copy ssh keys to user@host to enable password-less ssh logins.

ssh $HOST -l$USER cat /REMOTE/FILE | sdiff /LOCAL/FILE -
#remote diff with side-by-side ordering.

[[ $(COLUMNS=200 ps faux | awk '/grep/ {next} /ssh -N -R 4444/ {i++} END {print i}') ]] || nohup ssh -N -R 4444:localhost:22 user@relay &
#ensure your ssh tunnel will always be up (add in crontab)

for i in $(cat listofservers.txt); do konsole --new-tab -e ssh $i; done
#open a seperate konsole tab and ssh to each of N servers (konsole 4.2+)

ssh -N -L2001:localhost:80 -o "ProxyCommand ssh someuser@hubmachine nc -w 5 %h %p" someuser@destinationmachine
#setup a tunnel from destination machine port 80 to localhost 2001, via a second (hub) machine.

autossh -M 3307 -f user@server.com -L 3307:127.0.0.1:3306
#Permanent mysql ssh tunnel to server

awk '$1=="Host"{$1="";H=substr($0,2)};$1=="HostName"{print H,"$",$2}' ~/.ssh/config | column -s '$' -t
#Extract shortcuts and hostnames from .ssh/config

sshpass -p "YOUR_PASSWORD" ssh -o StrictHostKeyChecking=no YOUR_USERNAME@SOME_SITE.COM
#SSH Auto-login with password

diff <(ssh user@host cat /path/to/remotefile) /path/to/localfile
#Compare a remote file with a local file

diff -y <(ssh user@host find /boot|sort) <(find /boot|sort)
#Compare a remote dir with a local dir

Diff files over SSH: ssh [login]@[host] "cat [remote file]" | diff - "[local file]"
#Diff files over SSH

infocmp rxvt-unicode | ssh 10.20.30.40 "mkdir -p .terminfo && cat >/tmp/ti && tic /tmp/ti"
#Send your terminfo to another machine

autossh -M 0 -p 22 -C4c arcfour,blowfish-cbc -NfD 8080 -2 -L localport1:server1:remoteport1 -L bind_address2:localport2:server2:remoteport2 user@sshserver
#SSH tunneling self-connection

alias sshv='ssh -vvv -o LogLevel=DEBUG3'
#Debug SSH at the Maximum Verbosity Level

ssh user@host 'gunzip - > file' < file.gz
#send file to remote machine and unzip using ssh

xargs -n1 -P100 -I{} sh -c 'ssh {} uptime >output/{} 2>error/{}' <hostlist
#run command on a group of nodes in parallel redirecting outputs

ssh user@host 'tar -c --use-compress-prog=pbzip2 /<dir>/<subdir>' > <localfile>.tar.bz2
#remote-pbzip2 and transfer a directory to local file

ssh-keygen -f ~/.ssh/id_rsa -p
#Change SSH RSA passphrase

#INSIDE-host# ssh -f -N -R 8888:localhost:22 user@somedomain.org # #OUTSIDE-host#ssh user@localhost -p 8888#
#Reverse ssh


ssh 10.0.0.4 "cat /tmp/backup.sql | gzip -c1" | gunzip -c > backup.sql
#gzip over ssh

file='path to file'; tar -cf - "$file" | pv -s $(du -sb "$file" | awk '{print $1}') | gzip -c | ssh -c blowfish user@host tar -zxf - -C /opt/games
#improve copy file over ssh showing progress

mkfifo /tmp/fifo; ssh-keygen; ssh-copyid root@remotehostaddress; sudo ssh root@remotehost "tshark -i eth1 -f 'not tcp port 22' -w -" > /tmp/fifo &; sudo wireshark -k -i /tmp/fifo;
#analyze traffic remotely over ssh w/ wireshark

complete -W "$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v "\["`;)" ssh
#ssh autocomplete

ssh -T user@host /bin/bash -i
#"hidden" remote shell

tar cvzf - /directory/ | ssh root@host "cat > /dev/nst0"
#Send a backup job to a remote tape drive on another machine over SSH

ssh remoteUser@remoteHost "tail -f /var/log/scs/remoteLogName" | tee localLogName
#Get and read log from remote host (works with log on pipe, too)

date --set="$(ssh user@server 'date -u')"
#Synchronize date and time with a server over ssh

sshpass -p 'sshpssword' ssh -t <sshuser>@<remotehost> "echo <sudopassword> | sudo -S <command>"
#Remote execute command as sudoer via ssh

echo "properly_escaped_command" | ssh user@host $(< /dev/fd/0)
#run complex remote shell cmds over ssh, without escaping quotes

ssh-keygen -R $(dig +short host.domain.tld)
#Remove invalid key from the known_hosts file for the IP address of a host

ssh -R 9000:localhost:9000 you@remote-php-web-server.com
#Debug a remote php application (behind firewall) using ssh tunnel for XDEBUG port 9000

ssh-keygen -R hostname
#remove hostname from known_hosts

apt-get -y install git-core gitosis; adduser --home /home/git --gecos "git user" git; su git -c "ssh-keygen -t rsa -f /home/git/.ssh/id_rsa; gitosis-init < ~/.ssh/id_rsa"
#Deploy git server repo

ssh root@host1 ?cd /somedir/tocopy/ && tar -cf ? .? | ssh root@host2 ?cd /samedir/tocopyto/ && tar -xf -?
#Copy from host 1 to host 2 through your host

tar -cf - ./file | lzma -c | ssh user@sshserver $(cd /tmp; tar --lzma -xf -)
#send a file or directory via ssh compressing with lzma for low trafic

file=ftp://ftp.gimp.org/pub/gimp/v2.6/gimp-2.6.10.tar.bz2; ssh server "wget $file -O -" > $PWD/${file##*/}
#Download a file securely via a remote SSH server

autossh -N -D localhost:1080 myhome.example.net -p 443
#Start a SOCKS proxy to avoid a restrictive firewall

ssh user@<source_host> -- tar cz <path> | ssh user@<destination_host> -- tar vxzC <path>
#copy from host1 to host2, through your host

nice -n19 dump -0af - /<filesystem> -z9|gpg -e -r <gpg key id>|cstream -v 1 -t 60k|ssh <user@host> "cat > backup.img"
#Backup a filesystem to a remote machine and use cstream to throttle bandwidth of the backup

ssh user@server 'dd if=sda.img' | dd of=/dev/sda
#Restore a local drive from the image on remote host via ssh

ssh -vN hostname 2>&1 | grep "remote software version"
#Get the version of sshd on a remote system

ssh -NL 2000:remotehost:22 remotehost
#Forwards connections to your port 2000 to the port 22 of a remote host via ssh tunnel

for i in `ps aux | grep ssh | grep -v grep | awk {'print $2'}` ; do kill $i; done
#Kill any lingering ssh processes

ssh somemachine "cd some dir; tar zcpf - somedirname" |tar zxpf -
#get a directory from one machine to another using tar and ssh

ssh user@host "ps aux | grep httpd | wc -l"
#Run a command on a remote machine

pssh -h RemoteHosts.txt -P -I < ~/LocalScript.sh
#Run a script in parrallel over ssh

ssh [remote-machine] "cat file" | xclip -selection c
#copy remote ssh session output to local clipboard

diff <(ssh-keygen -y -f ~/.ssh/id_rsa) <(cut -d' ' -f1,2 ~/.ssh/id_rsa.pub)
#Check SSH public and private keys matching

ssh -o ProxyCommand='nc -x ProxyHost:8080 %h %p' TargetHost
#Tunnel ssh through Socks Proxy

ssh -t HOSTNAME 'tail -f LOGFILE' | while read; do growlnotify -t "TITLE" -m "$REPLY"; done
#tail -f a log file over ssh into growl

ssh -l username server.tdl "tar -czf - /home/username/public_html" | tar -xzf -
#Get backup from remote host, then expand in current directory using tar

tar cvzf - /folder/ | ssh root@192.168.0.1 "dd of=/dest/folder/file.tar.gz"
#Tunneling commands over SSH

ssh user@hostname.domain "> ~/.bash_history"
#Don't save commands in bash history (only for current session)

svn import /home/kaz/myproject svn+ssh://svn.FOO.codehaus.org/home/projects/FOO/scm/project1/trunk
#import a new set of files located in a local directory into a remote Subversion repository

ssh user@server.com sudo tcpdump -i eth0 -w - 'port 80'| /Applications/Wireshark.app/Contents/Resources/bin/wireshark -k -i -
#analyze traffic remotely over ssh w/ wireshark

var=host ;while ! nc -zw 1 $var 22;do sleep 1; done ; ssh user@$var
#Automatically connect to a host with ssh once it is online

nice -n -20 ssh SOURCE_SERVER "tail -f /var/log/httpd/access.log " | awk '{print $7}' | grep jsp | parallel 'curl TARGET_SERVER{} 2>&1 /dev/null'
#Real time duplication of Apache app traffic to a second server

ssh -tq -o "BatchMode yes" $HOST <some_command> >> to_a_file
#ssh batch jobs: query hundreds of hosts with an ssh command

ssh -t -X -A user@sshproxy ssh -X -A user@sshhost
#ssh X tunneling over multiple ssh hosts (through ssh proxy)

command | ssh myHost xsel -i --display :0
#Send remote command output to your local clipboard

tar cfX - exclude_opt_weblogic . | ssh tmp-esxsb044 "cd /opt/weblogic ; tar xf -"
#tar via network

diff <(ssh user@host1 cat /path/to/file) <(ssh user@host2 cat /path/to/file2)
#diff 2 remote files

ssh root@192.168.0.1 "cd /;nice -n 10 tar cvpP ?exclude={"/proc/*","/sys*","/tmp/*","/home/user/*"} /">backup.tar.gz
#backup system over ssh, exlucde common dirs

tar cvzf - /wwwdata | ssh root@IP "dd of=/backup/wwwdata.tar.gz"
#Backup trought SSH

ssh [user]@[host] "ogg123 -" < [podcast].ogg
#Stream audio over ssh ogg version

dd if=/dev/sda | gzip -c | ssh user@ip 'dd of=/mnt/backups/sda.dd'
#clone a hard drive to a remote directory via ssh tunnel, and compressing the image

ssh -i $PRIVATEKEY $HOST -C 'cd $SOURCE; tar -cz --numeric-owner .' | tee $DESTINATION/backup.tgz | tar -tz
#Backup with SSH in a archive

ssh user@host "(cd /path/to/remote/top/dir ; tar cvf - ./*)" | tar xvf -
#Copy files and directories from a remote machine to the local machine

LC_ALL=fr_FR luit ssh root@remote_machine_ip
#Connect to remote machine with other enconding charset

ssh -L 5900:localhost:5900 user@exampleserver.com
#tunnel vnc port

echo -n m{1..5}.cluster.net | xargs -d' ' -n1 -P5 -I{} ssh {} 'uptime'
#run command on a group of nodes in parallel

tar -cvzf - /source/path | ssh <targethostname> -l <username> dd of=/destination/path/backupfile.tgz
#Adhoc tar backup

ssh-keygen -l -f [pubkey] | awk '{print $2}' | tr -ds ':' '' | egrep -ie "[a-f0-9]{32}"
#Validate openssh key & print checksum

ping localip -c 1 -W 1 &> /dev/null && ssh localip || ssh globalip
#SSH to a machine's internet address if it is not present on your local network

tar cvzf - dir | ssh my_server 'tar xzf -'
#oneliner to transfer a directory using ssh and tar

ssh remoteserver 'nohup /path/to/script `</dev/null` >nohup.out 2>&1 &'
#execute/start some scripts on a remote machine/server (which will terminate automatically) and disconnect from the server

mussh -h 192.168.100.{1..50} -m -t 10 -c uptime
#for ssh uptime

for k in `seq -w 1 50` ; do ssh 192.168.100.$k uptime ; done
#for ssh uptime

colordiff <(ssh user@host cat /etc/ssh/sshd_config) /etc/ssh/sshd_config
#diff remote and local sshd_configs

ssh user@remotehost "find basedir -type d" | xargs -I {} -t mkdir -p {}
#Replicate a directory structure from a 'basedir' in a remote server.

ssh user@remote "tar cfp - /path/to/log/* | gzip" > local.tar.gz
#get gzipped logs from webserver to local machine

ssh username1@servername1 -t ssh username2@servername2 uuencode -m testfile1.tar - | uudecode > testfile1.tar
#Copy a file over SSH without SCP

ssh -t user@host 'sudo bash -c "ls /var/log && cat /etc/passwd"'
#Run multiple commands on a remote host with sudo

cat ~/.ssh/id_rsa.pub | ssh user@host 'cat >> ~/.ssh/authorized_keys'
#Copy ssh keys to user@host to enable password-less ssh logins.

diff -u <(ssh -t user@host1 sudo cat /dir1/file1) <(ssh -t user@host2 sudo cat /dir2/file2)
#neat diff of remote files owned by root on different systems

python -m SimpleHTTPServer 8000 &; sudo localtunnel -k ~/.ssh/id_rsa.pub 8000
#Simple way to share a directory over http without touching your router

complete -W "$(echo $(grep '^ssh ' .bash_history | sort -u | sed 's/^ssh /\"/' | sed 's/$/\"/'))" ssh
#SSH Autocomplete. Takes your history and creates ssh autocomplete using tab

ssh -t user@remote_host tmux attach
#immediatly attach to previous tmux session when connecting through ssh

ssh login@server "cat path/filename.mp3" | mplayer -
#Music streaming via ssh

ssh user@host "ffmpeg -f x11grab -r 5 -s 1280x720 -i :0 -f avi -" | ffplay - &>/dev/null
#Live stream a remote desktop over ssh using only ffmpeg

ssh user@host "ffmpeg -f x11grab -s 1920x1080 -i :0 -r 1 -t 1 -f mjpeg -" | display
#open a screenshot of a remote desktop via ssh

cat myfile.mp3 | ssh user@remotemachine "mplayer -cache 8912 -"
#Play local mp3 file on remote machine's speakers

cat tarfile.tar.gz | ssh server.com " cd /tmp; tar xvzf - directory/i/want"
#Untar a directory in a tar file over ssh

cat LOCALFILE | ssh HOST "cat > REMOTEFILE"
#Copy a file over SSH without SCP

echo $SSH_CLIENT | cut -f 1 -d ' '
#Get the IP of the host your coming from when logged in remotely

ssh user@remoteserver "PGPASSWORD='passwd' pg_dump -U user bd_name | bzip2 -zv9" | bzcat | psql -U user bd_name
#dump a remote db via ssh and populate local db with postgres

ssh -q user@server
#Skip banner on ssh login prompt

ssh-keygen -G /tmp/moduli-2048.candidates -b 2048
#generate the moduli file for openssh if lost

diff /path/to/localfile <(ssh user@host cat /path/to/remotefile)
#Compare a remote file with a local file

ssh user@remote "cat /remote/music/dir/*.mp3" | mpg123 -
#Quick way to play remote audio files locally ( Linux )

ssh remotebox tail -f /var/log/remotelog
tail a log over ssh




